#include "xtal.h"
#include "xtal_macro.h"

#include "xtal_stringspace.h"

namespace xtal{

namespace{

void Iterator_each(const VMachinePtr& vm){
	vm->return_result(vm->arg_this());
}

void Iterator_block_first(const VMachinePtr& vm){
	vm->arg_this()->rawsend(vm, Xid(block_next));
}

}

class ContinuationBlock : public Base{
public:

	ContinuationBlock(){}

	void block_first(const VMachinePtr& vm){
		block_ = xnew<VMachine>();
		block_->assign(vm);
		vm->return_result(null);
	}

	void rawcall(const VMachinePtr& vm){
		call_ = xnew<VMachine>();
		call_->assign(vm);
		vm->assign(block_);
		vm->return_result(from_this(this));
	}

	void block_next(const VMachinePtr& vm){
		vm->assign(call_);
		vm->return_result();
	}

	void visit_members(Visitor& m){
		Base::visit_members(m);
		m & block_ & call_;
	}

private:

	VMachinePtr block_;
	VMachinePtr call_;
};

/*
struct BindMemfunData{
	int_t val[4];
	int_t val_size;
	param_types_holder_n* pth;

	template<class TFun>
	BindFunData(const TFun& v){
		typedef cmemfun_holder<TFun> fun_t;
		*(fun_t*)data = fun_t(v);
		size = sizeof(T);
		pth = &fun_param_holder<fun_t>::value;
	}
};

struct BindFunInfo{
	const char_t* name;
	BindFunData bind_fun_data;
	CppClassSymbolData* ccsd;
	int_t accessibility;
};
*/

void bind(){

	builtin()->def(Xid(String), new_cpp_class<String>());
	builtin()->def(Xid(Int), new_cpp_class<Int>());
	builtin()->def(Xid(Float), new_cpp_class<Float>());
	builtin()->def(Xid(Null), new_cpp_class<Null>());
	builtin()->def(Xid(Undefined), new_cpp_class<Undefined>());
	builtin()->def(Xid(Bool), new_cpp_class<Bool>());
	builtin()->def(Xid(IntRange), new_cpp_class<IntRange>());
	builtin()->def(Xid(FloatRange), new_cpp_class<FloatRange>());
	builtin()->def(Xid(ChRange), new_cpp_class<ChRange>());

	{
		ClassPtr p = new_cpp_class<ContinuationBlock>(Xid(ContinuationBlock));
		p->def(Xid(new), ctor<ContinuationBlock>());
		p->def_method(Xid(block_first), &ContinuationBlock::block_first);
		p->def_method(Xid(block_next), &ContinuationBlock::block_next);
		p->def_method(Xid(block_break), &ContinuationBlock::block_next);
		p->def_method(Xid(block_catch), &ContinuationBlock::block_next);
		p->def_method(Xid(op_call), &ContinuationBlock::rawcall);

		builtin()->def(Xid(ContinuationBlock), p);
	}

	{
		ClassPtr p = new_cpp_class<StringEachIter>(Xid(StringEachIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &StringEachIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<ChRangeIter>(Xid(ChRangeIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &ChRangeIter::block_next);
	}

	{
		new_cpp_class<Range>(Xid(Range));

		ClassPtr p = new_cpp_class<ChRange>(Xid(ChRange));
		p->inherit(cpp_class<Range>());
		p->def(Xid(new), ctor<ChRange, const StringPtr&, const StringPtr&>());
		p->def_method(Xid(each), &ChRange::each);
	}

	{
		ClassPtr p = new_cpp_class<String>(Xid(String));
		p->set_final();
		p->inherit(Iterable());

		p->def(Xid(new), ctor<String>());
		p->def_method(Xid(to_i), &String::to_i);
		p->def_method(Xid(to_f), &String::to_f);
		p->def_method(Xid(to_s), &String::to_s);
		p->def_method(Xid(clone), &String::clone);

		p->def_method(Xid(length), &String::length);
		p->def_method(Xid(intern), &String::intern);

		p->def_method(Xid(each), &String::each);

		p->def_method(Xid(op_range), &String::op_range, cpp_class<String>());
		p->def_method(Xid(op_cat), &String::op_cat, cpp_class<String>());
		p->def_method(Xid(op_cat_assign), &String::op_cat, cpp_class<String>());
		p->def_method(Xid(op_eq), &String::op_eq, cpp_class<String>());
		p->def_method(Xid(op_lt), &String::op_lt, cpp_class<String>());
	}

	{
		ClassPtr p = new_cpp_class<InternedStringIter>(Xid(InternedStringIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &InternedStringIter::block_next);
	}

	set_cpp_class<ID>(cpp_class<String>());

/////////////////////////////

	{
		ClassPtr p = new_cpp_class<Exception>();
		p->def(Xid(new), ctor<Exception, const StringPtr&>()->param(0, Xid(message), empty_string));
		p->def_method(Xid(initialize), &Exception::initialize)->param(0, Xid(message), empty_string);
		p->def_method(Xid(to_s), &Exception::to_s);
		p->def_method(Xid(message), &Exception::message);
		p->def_method(Xid(backtrace), &Exception::backtrace);
		p->def_method(Xid(append_backtrace), &Exception::append_backtrace);

		builtin()->def(Xid(Exception), p);
	}

	{
		ClassPtr p = new_cpp_class<Any>(Xid(Any));
		p->def_method(Xid(class), &Any::get_class);
		p->def_method(Xid(get_class), &Any::get_class);
		p->def_method(Xid(self), &Any::self);
		p->def_method(Xid(object_name), &Any::object_name);
		p->def_method(Xid(object_name_list), &Any::object_name_list);
		p->def_method(Xid(s_save), &Any::s_save);
		p->def_method(Xid(s_load), &Any::s_load);

		p->def_double_dispatch_method(Xid(op_add));
		p->def_double_dispatch_method(Xid(op_sub));
		p->def_double_dispatch_method(Xid(op_cat));
		p->def_double_dispatch_method(Xid(op_mul));
		p->def_double_dispatch_method(Xid(op_div));
		p->def_double_dispatch_method(Xid(op_mod));
		p->def_double_dispatch_method(Xid(op_and));
		p->def_double_dispatch_method(Xid(op_or));
		p->def_double_dispatch_method(Xid(op_xor));
		p->def_double_dispatch_method(Xid(op_shr));
		p->def_double_dispatch_method(Xid(op_shl));
		p->def_double_dispatch_method(Xid(op_ushr));

		p->def_double_dispatch_method(Xid(op_add_assign));
		p->def_double_dispatch_method(Xid(op_sub_assign));
		p->def_double_dispatch_method(Xid(op_cat_assign));
		p->def_double_dispatch_method(Xid(op_mul_assign));
		p->def_double_dispatch_method(Xid(op_div_assign));
		p->def_double_dispatch_method(Xid(op_mod_assign));
		p->def_double_dispatch_method(Xid(op_and_assign));
		p->def_double_dispatch_method(Xid(op_or_assign));
		p->def_double_dispatch_method(Xid(op_xor_assign));
		p->def_double_dispatch_method(Xid(op_shr_assign));
		p->def_double_dispatch_method(Xid(op_shl_assign));
		p->def_double_dispatch_method(Xid(op_ushr_assign));
		p->def_double_dispatch_method(Xid(op_eq));
		p->def_double_dispatch_method(Xid(op_lt));
		p->def_double_dispatch_method(Xid(op_at));
		p->def_double_dispatch_method(Xid(op_set_at));
		p->def_double_dispatch_method(Xid(op_call));
		p->def_double_dispatch_method(Xid(op_range));
		p->def_double_dispatch_method(Xid(op_in));

		builtin()->def(Xid(Any), cpp_class<Any>());	
	}

///////////////////

	{
		ClassPtr p = new_cpp_class<Undefined>(Xid(Undefined));
		p->set_final();
	}

	{
		ClassPtr p = new_cpp_class<Null>(Xid(Null));
		p->set_final();
	}

	{
		ClassPtr p = new_cpp_class<Int>(Xid(Int));	
		p->inherit(new_cpp_class<Float>());
		p->set_final();
		p->def_method(Xid(to_i), &Int::to_i);
		p->def_method(Xid(to_f), &Int::to_f);
		p->def_method(Xid(to_s), &Int::to_s);
		p->def_method(Xid(op_range), (IntRangePtr (Int::*)(int_t, int_t))&Int::op_range, cpp_class<Int>());
		p->def_method(Xid(op_range), (FloatRangePtr (Int::*)(float_t, int_t))&Int::op_range, cpp_class<Float>());
		p->def_method(Xid(op_in), (bool (Int::*)(const IntRangePtr&))&Int::op_in, cpp_class<IntRange>());
		p->def_method(Xid(op_in), (bool (Int::*)(const FloatRangePtr&))&Int::op_in, cpp_class<FloatRange>());
	}

	{
		ClassPtr p = new_cpp_class<Float>(Xid(Float));
		p->set_final();
		p->def_method(Xid(to_i), &Float::to_i);
		p->def_method(Xid(to_f), &Float::to_f);
		p->def_method(Xid(to_s), &Float::to_s);
		p->def_method(Xid(op_range), (FloatRangePtr (Float::*)(int_t, int_t))&Float::op_range, cpp_class<Int>());
		p->def_method(Xid(op_range), (FloatRangePtr (Float::*)(float_t, int_t))&Float::op_range, cpp_class<Float>());
		p->def_method(Xid(op_in), (bool (Float::*)(const IntRangePtr&))&Float::op_in, cpp_class<IntRange>());
		p->def_method(Xid(op_in), (bool (Float::*)(const FloatRangePtr&))&Float::op_in, cpp_class<FloatRange>());
	}

	{
		ClassPtr p = new_cpp_class<IntRangeIter>(Xid(IntRangeIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &IntRangeIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<Range>(Xid(Range));
		p->inherit(Iterable());
		p->def(Xid(new), ctor<Range, const AnyPtr&, const AnyPtr&, int_t>()->param(2, Xid(kind), 0));
		p->def_method(Xid(left), &Range::left);
		p->def_method(Xid(right), &Range::right);
		p->def_method(Xid(kind), &Range::kind);
	}

	{
		ClassPtr p = new_cpp_class<IntRange>(Xid(IntRange));
		p->inherit(cpp_class<Range>());
		p->def(Xid(new), ctor<IntRange, int_t, int_t, int_t>()->param(2, Xid(kind), 0));
		p->def_method(Xid(begin), &IntRange::begin);
		p->def_method(Xid(end), &IntRange::end);
		p->def_method(Xid(each), &IntRange::each);
	}

	{
		ClassPtr p = new_cpp_class<FloatRange>(Xid(FloatRange));
		p->inherit(cpp_class<Range>());
		p->def(Xid(new), ctor<FloatRange, float_t, float_t, int_t>()->param(2, Xid(kind), 0));
	}

	{
		ClassPtr p = new_cpp_class<ArrayIter>(Xid(ArrayIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &ArrayIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<Array>(Xid(Array));
		p->set_final();
		p->inherit(Iterable());

		p->def(Xid(new), ctor<Array, int_t>()->param(0, Xid(size), 0));
		
		p->def_method(Xid(size), &Array::size);
		p->def_method(Xid(length), &Array::size);
		p->def_method(Xid(resize), &Array::resize);
		p->def_method(Xid(empty), &Array::empty);
		p->def_method(Xid(is_empty), &Array::is_empty);
		p->def_method(Xid(slice), &Array::slice)->param(1, Xid(n), 1);
		p->def_method(Xid(splice), &Array::splice)->param(1, Xid(n), 1);
		p->def_method(Xid(pop_back), &Array::pop_back);
		p->def_method(Xid(pop_front), &Array::pop_front);
		p->def_method(Xid(push_back), &Array::push_back);
		p->def_method(Xid(push_front), &Array::push_front);

		p->def_method(Xid(erase), &Array::erase)->param(1, Xid(n), 1);
		p->def_method(Xid(insert), &Array::insert);
		p->def_method(Xid(to_a), &Array::to_a);
		p->def_method(Xid(each), &Array::each);
		p->def_method(Xid(clone), &Array::clone);
		p->def_method(Xid(front), &Array::front);
		p->def_method(Xid(back), &Array::back);
		p->def_method(Xid(clear), &Array::clear);
		p->def_method(Xid(reverse), &Array::reverse);
		p->def_method(Xid(assign), &Array::assign);
		p->def_method(Xid(concat), &Array::concat);

		p->def_method(Xid(op_to_a), &Array::to_a);
		p->def_method(Xid(op_cat), &Array::cat, cpp_class<Array>());
		p->def_method(Xid(op_cat_assign), &Array::cat_assign, cpp_class<Array>());
		p->def_method(Xid(op_at), &Array::op_at, cpp_class<Int>());
		p->def_method(Xid(op_set_at), &Array::op_set_at, cpp_class<Int>());
		p->def_method(Xid(op_eq), &Array::op_eq, cpp_class<Array>());
		p->def_method(Xid(op_call), &Array::op_at, cpp_class<Int>());
	}

	{
		ClassPtr p = new_cpp_class<MultiValue>(Xid(MultiValue));
		p->set_final();
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &MultiValue::block_next);
		p->def_method(Xid(at), &MultiValue::at);
		p->def_method(Xid(size), &MultiValue::size);
	}

	{
		set_cpp_class<Expr>(new_cpp_class<xpeg::TreeNode>());
	}

	builtin()->def(Xid(Array), cpp_class<Array>());
	builtin()->def(Xid(MultiValue), cpp_class<MultiValue>());

///////////////////

	{
		ClassPtr p = new_cpp_class<MapIter>(Xid(MapIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &MapIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<Map>(Xid(Map));
		p->inherit(Iterable());
		
		p->def(Xid(new), ctor<Map>());
		p->def_method(Xid(to_m), &Map::to_m);
		p->def_method(Xid(size), &Map::size);
		p->def_method(Xid(length), &Map::length);
		p->def_method(Xid(insert), &Map::insert);
		p->def_method(Xid(each), &Map::pairs);
		p->def_method(Xid(pairs), &Map::pairs);
		p->def_method(Xid(keys), &Map::keys);
		p->def_method(Xid(values), &Map::values);
		p->def_method(Xid(clone), &Map::clone);
		p->def_method(Xid(erase), &Map::erase);
		p->def_method(Xid(empty), &Map::empty);
		p->def_method(Xid(is_empty), &Map::is_empty);
		p->def_method(Xid(assign), &Map::assign);
		p->def_method(Xid(concat), &Map::concat);

		p->def_method(Xid(op_to_m), &Map::to_m);
		p->def_method(Xid(op_at), &Map::at, cpp_class<Any>());
		p->def_method(Xid(op_set_at), &Map::set_at, cpp_class<Any>());
		p->def_method(Xid(op_cat), &Map::cat, cpp_class<Map>());
		p->def_method(Xid(op_cat_assign), &Map::cat_assign, cpp_class<Map>());
		p->def_method(Xid(op_call), &Map::at, cpp_class<Any>());
	}

	{
		ClassPtr p = new_cpp_class<Set>(Xid(Set));
		p->inherit(cpp_class<Map>());
		
		p->def(Xid(new), ctor<Set>());
		p->def_method(Xid(each), &Set::each);
	}

	builtin()->def(Xid(Map), cpp_class<Map>());
	builtin()->def(Xid(Set), cpp_class<Set>());

///////////////////


	{
		ClassPtr p = Iterator();
		p->inherit(Iterable());

		p->def_fun(Xid(each), &Iterator_each);
		p->def_fun(Xid(block_first), &Iterator_block_first);
	}

	{
		ClassPtr p = new_cpp_class<ZipIter>();
		p->inherit(Iterator());
		p->def(Xid(new), ctor<ZipIter, const VMachinePtr&>());
		p->def_method(Xid(block_first), &ZipIter::block_first);
		p->def_method(Xid(block_next), &ZipIter::block_next);
		p->def_method(Xid(block_break), &ZipIter::block_break);
	}

	builtin()->def(Xid(zip), cpp_class<ZipIter>());


///////////////////
	{
		ClassPtr p = new_cpp_class<NativeFun>(Xid(NativeFun));
		set_cpp_class<NativeFunBindedThis>(p);
		builtin()->def(Xid(NativeFun), p);
	}

	{
		ClassPtr p = new_cpp_class<Method>(Xid(Method));
	}

	{
		ClassPtr p = new_cpp_class<Fun>(Xid(Fun));
		p->inherit(cpp_class<Method>());
	}

	{
		ClassPtr p = new_cpp_class<Fiber>(Xid(Fiber));
		p->inherit(cpp_class<Fun>());
		p->inherit(Iterator());
		p->def_method(Xid(reset), &Fiber::reset);
		p->def_method(Xid(block_first), &Fiber::block_next);
		p->def_method(Xid(block_next), &Fiber::block_next);
		p->def_method(Xid(halt), &Fiber::halt);
		p->def_method(Xid(is_alive), &Fiber::is_alive);
	}

	{
		ClassPtr p = new_cpp_class<Lambda>(Xid(Lambda));
		p->inherit(cpp_class<Fun>());
	}

	{
		ClassPtr p = new_cpp_class<Arguments>(Xid(Arguments));
		p->def(Xid(new), ctor<Arguments, const AnyPtr&, const AnyPtr&>()->param(0, Xid(ordered), null)->param(1, Xid(named), null));
		p->def_method(Xid(size), &Arguments::length);
		p->def_method(Xid(length), &Arguments::length);
		p->def_method(Xid(ordered_arguments), &Arguments::ordered_arguments);
		p->def_method(Xid(named_arguments), &Arguments::named_arguments);
		
		p->def(Xid(op_at), method(&Arguments::op_at_int), cpp_class<Int>());
		p->def(Xid(op_at), method(&Arguments::op_at_string), cpp_class<String>());
	}

	builtin()->def(Xid(Arguments), cpp_class<Arguments>());
	builtin()->def(Xid(Fun), cpp_class<Fun>());
	builtin()->def(Xid(Fiber), cpp_class<Fiber>());

///////////////////

	{
		ClassPtr p = new_cpp_class<Code>(Xid(Code));
		p->inherit(cpp_class<Fun>());
		p->def_method(Xid(filelocal), &Code::filelocal);
		p->def_method(Xid(inspect), &Code::inspect);
	}

	builtin()->def(Xid(Code), cpp_class<Code>());

///////////////////

	{
		ClassPtr p = new_cpp_class<MembersIter>(Xid(ClassMembersIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &MembersIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<Frame>(Xid(Frame));
		p->def_method(Xid(members), &Frame::members);
	}

	builtin()->def(Xid(Frame), cpp_class<Frame>());

///////////////////

	{
		ClassPtr p = new_cpp_class<Class>(Xid(Class));
		p->inherit(cpp_class<Frame>());
		p->def_method(Xid(inherit), &Class::inherit_strict);
		p->def_method(Xid(overwrite), &Class::overwrite);
		p->def_method(Xid(s_new), &Class::s_new);
		p->def_method(Xid(inherited_classes), &Class::inherited_classes);
		p->def_method(Xid(is_inherited), &Any::is_inherited);
		p->def_method(Xid(find_near_member), &Class::find_near_member)->param(1, Xid(secondary_key), null);
	}

	{
		ClassPtr p = new_cpp_class<ClassInheritedClassesIter>(Xid(ClassInheritedClassesIter));
		p->inherit(Iterator());
		p->def_method(Xid(block_next), &ClassInheritedClassesIter::block_next);
	}

	{
		ClassPtr p = new_cpp_class<CppClass>(Xid(CppClass));
		p->inherit(cpp_class<Class>());
	}

	builtin()->def(Xid(Class), cpp_class<Class>());
	builtin()->def(Xid(CppClass), cpp_class<CppClass>());

///////////////////

	{
		ClassPtr p = new_cpp_class<Lib>(Xid(Lib));
		p->inherit(cpp_class<Class>());
		p->def(Xid(new), ctor<Lib>());
		p->def_method(Xid(append_load_path), &Lib::append_load_path);
	}
	builtin()->def(Xid(lib), lib());
	builtin()->def(Xid(Lib), cpp_class<Lib>());

///////////////////

	builtin()->def_fun(Xid(enable_debug), &enable_debug);
	builtin()->def_fun(Xid(disable_debug), &disable_debug);

	{
		SmartPtr<Debug> p = new_cpp_singleton<Debug>();
		p->def_singleton_method(Xid(break_point_hook), &Debug::break_point_hook);
		p->def_singleton_method(Xid(call_hook), &Debug::call_hook);
		p->def_singleton_method(Xid(return_hook), &Debug::return_hook);
		p->def_singleton_method(Xid(throw_hook), &Debug::throw_hook);
		p->def_singleton_method(Xid(set_break_point_hook), &Debug::set_break_point_hook);
		p->def_singleton_method(Xid(set_call_hook), &Debug::set_call_hook);
		p->def_singleton_method(Xid(set_return_hook), &Debug::set_return_hook);
		p->def_singleton_method(Xid(set_throw_hook), &Debug::set_throw_hook);

		p->def(Xid(DebugInfo), new_cpp_class<DebugInfo>());
		builtin()->def(Xid(debug), p);
	}

	{
		ClassPtr p = new_cpp_class<DebugInfo>(Xid(DebugInfo));
		p->def_method(Xid(clone), &DebugInfo::clone);
		p->def_method(Xid(kind), &DebugInfo::kind);
		p->def_method(Xid(line), &DebugInfo::line);
		p->def_method(Xid(fun_name), &DebugInfo::fun_name);
		p->def_method(Xid(file_name), &DebugInfo::file_name);
		p->def_method(Xid(set_kind), &DebugInfo::set_kind);
		p->def_method(Xid(set_line), &DebugInfo::line);
		p->def_method(Xid(set_fun_name), &DebugInfo::set_fun_name);
		p->def_method(Xid(set_file_name), &DebugInfo::set_file_name);

		p->def(Xid(BREAKPOINT), BREAKPOINT);
		p->def(Xid(CALL), BREAKPOINT_CALL);
		p->def(Xid(RETURN), BREAKPOINT_RETURN);
		p->def(Xid(RETURN_THROW), BREAKPOINT_THROW);
	}

///////////////////

	{
		ClassPtr p = new_cpp_class<Stream>(Xid(Stream));
		
		p->def_method(Xid(get_s), &Stream::get_s);
		p->def_method(Xid(get_s_all), &Stream::get_s_all);
		p->def_method(Xid(put_s), (void (Stream::*)(const StringPtr&))&Stream::put_s);

		p->def_method(Xid(print), &Stream::print);
		p->def_method(Xid(println), &Stream::println);

		p->def_method(Xid(seek), &Stream::seek)->param(1, Xid(whence), Stream::XSEEK_SET);
		p->def_method(Xid(tell), &Stream::tell);
		p->def_method(Xid(pour), &Stream::pour);
		p->def_method(Xid(pour_all), &Stream::pour_all);
		p->def_method(Xid(size), &Stream::size);
		p->def_method(Xid(close), &Stream::close);

		p->def_method(Xid(eos), &Stream::eos);

		p->def_method(Xid(serialize), &Stream::serialize);
		p->def_method(Xid(deserialize), &Stream::deserialize);
		p->def_method(Xid(xtalize), &Stream::xtalize);
		p->def_method(Xid(dextalize), &Stream::dextalize);

		p->def_method(Xid(block_first), &Stream::block_first);
		p->def_method(Xid(block_next), &Stream::block_next);
		p->def_method(Xid(block_break), &Stream::block_break);

		p->def(Xid(SEEK_SET), Stream::XSEEK_SET);
		p->def(Xid(SEEK_CUR), Stream::XSEEK_CUR);
		p->def(Xid(SEEK_END), Stream::XSEEK_END);

		p->def_method(Xid(put_u8), &Stream::put_u8);

	}

	{
		ClassPtr p = new_cpp_class<PointerStream>(Xid(PointerStream));
		p->inherit(cpp_class<Stream>());
	}

	{
		ClassPtr p = new_cpp_class<MemoryStream>(Xid(MemoryStream));
		p->inherit(cpp_class<PointerStream>());
		p->def(Xid(new), ctor<MemoryStream>());
		p->def_method(Xid(to_s), &MemoryStream::to_s);
		p->def_method(Xid(resize), &MemoryStream::resize);
	}

	{
		ClassPtr p = new_cpp_class<StringStream>(Xid(StringStream));
		p->inherit(cpp_class<Stream>());
		p->def(Xid(new), ctor<StringStream, const StringPtr&>());
		p->def_method(Xid(to_s), &StringStream::to_s);
	}

	builtin()->def(Xid(Stream), cpp_class<Stream>());
	builtin()->def(Xid(MemoryStream), cpp_class<MemoryStream>());
	builtin()->def(Xid(StringStream), cpp_class<StringStream>());

	{
		new_cpp_class<InstanceVariableGetter>();
		new_cpp_class<InstanceVariableSetter>();
	}
///////////////////

	{
		ClassPtr p = new_cpp_class<Thread>();
		p->def(Xid(new), fun(&new_thread));
		p->def_method(Xid(join), &Thread::join);
		p->def_fun(Xid(yield), &yield_thread);
		p->def_fun(Xid(sleep), &sleep_thread);

		builtin()->def(Xid(Thread), cpp_class<Thread>());
	}

	{
		ClassPtr p = new_cpp_class<Mutex>();
		p->def(Xid(new), fun(&new_mutex));
		p->def_method(Xid(lock), &lock_mutex);
		p->def_method(Xid(unlock), &Mutex::unlock);

		builtin()->def(Xid(Mutex), cpp_class<Mutex>());
	}

///////////////////

	{
		ClassPtr p = new_cpp_class<Format>(Xid(Format));
		p->def_method(Xid(to_s), &Format::to_s);
		p->def_method(Xid(serial_save), &Format::serial_save);
		p->def_method(Xid(serial_load), &Format::serial_load);
		p->def(Xid(serial_new), ctor<Format>());
	}

	{
		ClassPtr p = new_cpp_class<Text>(Xid(Text));
		p->def_method(Xid(to_s), &Text::to_s);
		p->def_method(Xid(serial_save), &Text::serial_save);
		p->def_method(Xid(serial_load), &Text::serial_load);
		p->def(Xid(serial_new), ctor<Text>());
	}

	builtin()->def(Xid(Format), cpp_class<Format>());
	builtin()->def(Xid(Text), cpp_class<Text>());

	builtin()->def_fun(Xid(assign_text_map), &assign_text_map);
	builtin()->def_fun(Xid(append_text_map), &append_text_map);
	builtin()->def_fun(Xid(format), &format);
	builtin()->def_fun(Xid(text), &text);

///////////////////


///////////////////

	builtin()->def(Xid(builtin), builtin());

	builtin()->def(Xid(Iterator), Iterator());
	builtin()->def(Xid(Iterable), Iterable());
	
#ifndef XTAL_NO_PARSER
	builtin()->def_fun(Xid(compile_file), &compile_file);
	builtin()->def_fun(Xid(compile), &compile);
#endif

	builtin()->def_fun(Xid(gc), &::xtal::gc);
	builtin()->def_fun(Xid(full_gc), &::xtal::full_gc);
	builtin()->def_fun(Xid(disable_gc), &::xtal::disable_gc);
	builtin()->def_fun(Xid(enable_gc), &::xtal::enable_gc);
	//builtin()->def_fun(Xid(clock), &clock_);
	builtin()->def_fun(Xid(open), &xtal::open)->param(1, Xid(mode), Xid(r));
	builtin()->def_fun(Xid(interned_strings), &interned_strings);

	lib()->def(Xid(builtin), builtin());
}

void exec_script(){

	Xemb((

builtin::StandardError: class(Exception){}
builtin::RuntimeError: class(StandardError){}
builtin::IOError: class(StandardError){}
builtin::LogicError: class(StandardError){}
builtin::CastError: class(StandardError){}
builtin::ArgumentError: class(StandardError){}
builtin::YieldError: class(StandardError){}
builtin::InstanceVariableError: class(StandardError){}
builtin::UnsupportedError: class(StandardError){}
builtin::RedefinedError: class(StandardError){}
builtin::AccessibilityError: class(StandardError){}
builtin::AssertionFailed: class(StandardError){}
builtin::CompileError: class(StandardError){
	initialize(message, errors:[]){
		Exception::initialize(%f"%s\n%s"(message, errors.join("\t\n")));
	}		
}

builtin::print: fun(...){
	return stdout.print(...);
}

builtin::println: fun(...){
	return stdout.println(...);
}

builtin::printf: fun(format_string, ...){
	return stdout.printf(format_string, ...);
}

Stream::printf: method(format_string, ...){
	this.print(format(format_string)(...));
}

builtin::load: fun(file_name, ...){
	code: compile_file(file_name);
	return code(...);
}

builtin::debug_scope: singleton{
	op_call{
		return this;
	}

	block_first{
		enable_debug();
		return this;
	}

	block_next{
		disable_debug();
		return null;
	}

	block_break{
		disable_debug();
		return null;
	}
}

	),
"\x78\x74\x61\x6c\x01\x00\x00\x00\x00\x00\x00\xc9\x68\x00\x01\x75\x00\x01\x00\x72\x2f\x00\x02\x0b\x28\x00\x04\x00\x2b\x00\x00\x02\x00\x00\x05\x1e\x00\x1e\x01\x32\x00\x01\x1b\x01\x36\x00\x27\x1b\x00\x28\x00\x06\x00\x68\x00\x07\x2b\x01\x00\x00\x00\x00\x08\x1b"
"\x01\x2b\x00\x00\x02\x00\x00\x09\x1e\x00\x1e\x01\x1b\x01\x36\x00\x05\x38\xff\xdd\x34\x00\x2a\x33\x32\x00\x02\x2f\x00\x05\x1e\x00\x1b\x00\x1b\x02\x2b\x01\x00\x01\x08\x00\x0b\x37\x00\x05\x1b\x00\x77\x31\x00\x05\x33\x1b\x01\x2b\x00\x00\x00\x08\x00\x0c\x35\x31"
"\x00\x02\x23\x00\x2d\x00\x08\x00\x68\x00\x01\x75\x00\x02\x00\x18\x0b\x68\x00\x08\x2a\x00\x00\x00\x02\x26\x00\x01\x68\x00\x08\x2a\x01\x00\x00\x00\x23\x00\x2d\x00\x0d\x00\x68\x00\x01\x75\x00\x03\x00\x1e\x2f\x00\x07\x1b\x01\x68\x00\x10\x2a\x01\x00\x01\x00\x1e"
"\x00\x0b\x1b\x00\x2a\x00\x00\x01\x03\x31\x00\x07\x23\x00\x2d\x00\x11\x00\x23\x00\x77\x00\x08\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x37\x00\x08\x00\x00\x00\x00\x00\x02\x00\x00\x00\x31\x00\x08\x00\x00\x00\x00\x00\x02\x00\x02\x00\x33\x00\x1e\x00\x00\x00\x00"
"\x01\x06\x00\x00\x00\x31\x00\x23\x00\x00\x00\x00\x01\x06\x00\x00\x00\x32\x00\x4f\x00\x00\x00\x00\x01\x0a\x00\x01\x00\x31\x00\x84\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x31\x00\xa6\x00\x00\x00\x00\x01\x0f\x00\x01\x00\x31\x00\x00\x00\x00\x04\x00\x00\x00\x00\x03"
"\x06\x00\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x08\x00\x00\x00\x03\x02\x02\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x84\x00\x00\x00\x03\x02\x0d\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xa6\x00\x00\x00\x03\x02\x0e\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x00\x03\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x69\x00\x00\x00\x73\x00\x00\x00\x00\x00\x00\x00\x69\x00\x00\x00\x69\x00\x00\x00\x00\x19\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x07"
"\x00\x00\x00\x0b\x00\x00\x00\x04\x00\x00\x00\x1b\x00\x00\x00\x07\x00\x00\x00\x1e\x00\x00\x00\x04\x00\x00\x00\x23\x00\x00\x00\x06\x00\x00\x00\x23\x00\x00\x00\x05\x00\x00\x00\x33\x00\x00\x00\x06\x00\x00\x00\x33\x00\x00\x00\x04\x00\x00\x00\x48\x00\x00\x00\x07"
"\x00\x00\x00\x7c\x00\x00\x00\x0c\x00\x00\x00\x7c\x00\x00\x00\x09\x00\x00\x00\x7f\x00\x00\x00\x0c\x00\x00\x00\x84\x00\x00\x00\x0a\x00\x00\x00\x8d\x00\x00\x00\x0b\x00\x00\x00\x98\x00\x00\x00\x0c\x00\x00\x00\x9e\x00\x00\x00\x11\x00\x00\x00\x9e\x00\x00\x00\x0e"
"\x00\x00\x00\xa1\x00\x00\x00\x11\x00\x00\x00\xa9\x00\x00\x00\x0f\x00\x00\x00\xb5\x00\x00\x00\x10\x00\x00\x00\xc0\x00\x00\x00\x11\x00\x00\x00\xc6\x00\x00\x00\x13\x00\x00\x00\x00\x01\x2a\x00\x00\x00\x03\x27\x00\x00\x00\x06\x73\x6f\x75\x72\x63\x65\x26\x00\x00"
"\x00\x11\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\x70\x2f\x69\x6e\x2e\x78\x74\x61\x6c\x27\x00\x00\x00\x0b\x69\x64\x65\x6e\x74\x69\x66\x69\x65\x72\x73\x28\x00\x00\x00\x12\x27\x00\x00\x00\x00\x27\x00\x00\x00\x07\x62\x75\x69\x6c\x74\x69\x6e\x27\x00\x00\x00\x08\x69\x74"
"\x65\x72\x61\x74\x6f\x72\x27\x00\x00\x00\x02\x69\x74\x27\x00\x00\x00\x11\x6f\x72\x64\x65\x72\x65\x64\x5f\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b\x5f\x66\x69\x72\x73\x74\x27\x00\x00\x00\x04\x74\x6f\x5f\x73\x27\x00\x00\x00"
"\x06\x73\x74\x64\x6f\x75\x74\x27\x00\x00\x00\x05\x70\x72\x69\x6e\x74\x27\x00\x00\x00\x0a\x62\x6c\x6f\x63\x6b\x5f\x6e\x65\x78\x74\x27\x00\x00\x00\x01\x65\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b\x5f\x63\x61\x74\x63\x68\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b"
"\x5f\x62\x72\x65\x61\x6b\x27\x00\x00\x00\x07\x70\x72\x69\x6e\x74\x6c\x6e\x27\x00\x00\x00\x09\x66\x69\x6c\x65\x5f\x6e\x61\x6d\x65\x27\x00\x00\x00\x04\x63\x6f\x64\x65\x27\x00\x00\x00\x0c\x63\x6f\x6d\x70\x69\x6c\x65\x5f\x66\x69\x6c\x65\x27\x00\x00\x00\x04\x6c"
"\x6f\x61\x64\x27\x00\x00\x00\x06\x76\x61\x6c\x75\x65\x73\x28\x00\x00\x00\x02\x20\x27\x00\x00\x00\x01\x0a"
);

	Xemb((

Any::op_in#Array: method(values){
	values{
		if(it==this){
			return true;
		}
	}
	return false;
}

Any::op_in#Set: method(values){
	return values[v];
}

Any::to_s: method{
	return %f!<%s>!(this.object_name);
}

Any::p: method{
	println(this.to_s);
	return this;
}

Any::to_a: method this.op_to_a;
Any::to_m: method this.op_to_m;

Int::times: method fiber{
	for(i: 0; i<this; ++i){
		yield i;
	}
}

/*
class IntTimesIter(Iterator){
	_i;
	_n;
	initialize(_i, _n){}
	block_next{
		if(_i<_n){
			++_i;
			return this, _i-1;
		}
		return null, null;
	}
}

Int::times: method{
	return IntTimesIter(0, this);
}
*/

Null::op_to_a: method [];
Null::op_to_m: method [:];
Null::block_first: method null;
Undefined::to_s: method "undefined";
Bool::block_next: method{
	return null, this;
}

Bool::block_first: Bool::block_next;

Bool::to_s: method this ? "true" : "false";

Int::block_next: method{
	return (this==0 ? null : this-1), this;
}

Int::block_first: Int::block_next;

/*
op_add: method(v){ return this + v; }
Int::op_add#Int: op_add;
Int::op_add#Float: op_add;
Float::op_add#Int: op_add;
Float::op_add#Float: op_add;
Int::op_add_assign#Int: op_add;
Int::op_add_assig#Float: op_add;
Float::op_add_assig#Int: op_add;
Float::op_add_assig#Float: op_add;

op_sub: method(v){ return this - v; }
Int::op_sub#Int: op_sub;
Int::op_sub#Float: op_sub;
Float::op_sub#Int: op_sub;
Float::op_sub#Float: op_sub;
Int::op_sub_assign#Int: op_sub;
Int::op_sub_assign#Float: op_sub;
Float::op_sub_assign#Int: op_sub;
Float::op_sub_assign#Float: op_sub;

op_mul: method(v){ return this * v; }
Int::op_mul#Int: op_mul;
Int::op_mul#Float: op_mul;
Float::op_mul#Int: op_mul;
Float::op_mul#Float: op_mul;
Int::op_mul_assign#Int: op_mul;
Int::op_mul_assign#Float: op_mul;
Float::op_mul_assign#Int: op_mul;
Float::op_mul_assign#Float: op_mul;

op_div: method(v){ return this / v; }
Int::op_div#Int: op_div;
Int::op_div#Float: op_div;
Float::op_div#Int: op_div;
Float::op_div#Float: op_div;
Int::op_div_assign#Int: op_div;
Int::op_div_assign#Float: op_div;
Float::op_div_assign#Int: op_div;
Float::op_div_assign#Float: op_div;

op_mod: method(v){ return this % v; }
Int::op_mod#Int: op_mod;
Int::op_mod#Float: op_mod;
Float::op_mod#Int: op_mod;
Float::op_mod#Float: op_mod;
Int::op_mod_assign#Int: op_mod;
Int::op_mod_assign#Float: op_mod;
Float::op_mod_assign#Int: op_mod;
Float::op_mod_assign#Float: op_mod;

op_and: method(v){ return this & v; }
Int::op_and#Int: op_and;
Int::op_and_assign#Int: op_and;

op_or: method(v){ return this | v; }
Int::op_or#Int: op_or;
Int::op_or_assign#Int: op_or;

op_xor: method(v){ return this ^ v; }
Int::op_xor#Int: op_xor;
Int::op_xor_assign#Int: op_xor;

op_shr: method(v){ return this >> v; }
Int::op_shr#Int: op_shr;
Int::op_shr_assign#Int: op_shr;

op_ushr: method(v){ return this >>> v; }
Int::op_ushr#Int: op_ushr;
Int::op_ushr_assign#Int: op_ushr;

op_shl: method(v){ return this << v; }
Int::op_shl#Int: op_shl;
Int::op_shl_assign#Int: op_shl;

op_inc: method{ return this+1; }
Int::op_inc: op_inc;
Float::op_inc: op_inc;

op_dec: method{ return this-1; }
Int::op_dec: op_dec;
Float::op_dec: op_dec;

op_pos: method{ return +this; }
Int::op_pos: op_pos;
Float::op_pos: op_pos;

op_neg: method{ return -this; }
Int::op_neg: op_neg;
Float::op_neg: op_neg;

op_com: method{ return ~this; }
Int::op_com: op_com;


op_lt: method(v){ return this < v; }
Int::op_lt#Int: op_lt;
Int::op_lt#Float: op_lt;
Float::op_lt#Int: op_lt;
Float::op_lt#Float: op_lt;

op_eq: method(v){ return this == v; }
Int::op_eq#Int: op_eq;
Int::op_eq#Float: op_eq;
Float::op_eq#Int: op_eq;
Float::op_eq#Float: op_eq;
*/
	),
"\x78\x74\x61\x6c\x01\x00\x00\x00\x00\x00\x06\x87\x68\x00\x01\x75\x00\x01\x00\x75\x2f\x00\x02\x1b\x02\x2b\x00\x00\x02\x00\x00\x05\x1e\x00\x1e\x01\x32\x00\x01\x1b\x01\x36\x00\x2a\x1b\x00\x0c\x39\x00\x0f\x36\x00\x0c\x03\x34\x00\x03\x33\x31\x00\x02\x23\x01\x1b"
"\x01\x2b\x00\x00\x02\x00\x00\x06\x1e\x00\x1e\x01\x1b\x01\x36\x00\x05\x38\xff\xda\x34\x00\x2a\x33\x32\x00\x02\x2f\x00\x06\x1e\x00\x1b\x00\x1b\x02\x2b\x01\x00\x01\x08\x00\x08\x37\x00\x05\x1b\x00\x77\x31\x00\x06\x33\x1b\x01\x2b\x00\x00\x00\x08\x00\x09\x35\x31"
"\x00\x02\x04\x23\x01\x23\x00\x68\x00\x0b\x2d\x00\x0a\x04\x68\x00\x01\x75\x00\x02\x00\x0c\x1b\x00\x68\x00\x0d\x4b\x23\x01\x23\x00\x68\x00\x0e\x2d\x00\x0a\x04\x68\x00\x01\x75\x00\x03\x00\x11\x0c\x28\x00\x0f\x00\x26\x00\x01\x2a\x01\x00\x01\x01\x23\x00\x2d\x00"
"\x10\x00\x68\x00\x01\x75\x00\x04\x00\x14\x0c\x28\x00\x10\x00\x68\x00\x11\x2a\x01\x00\x00\x00\x0c\x23\x01\x23\x00\x2d\x00\x12\x00\x68\x00\x01\x75\x00\x05\x00\x0c\x0c\x2b\x00\x00\x01\x01\x00\x13\x23\x00\x2d\x00\x14\x00\x68\x00\x01\x75\x00\x06\x00\x0c\x0c\x2b"
"\x00\x00\x01\x01\x00\x15\x23\x00\x2d\x00\x16\x00\x68\x00\x17\x75\x00\x07\x00\x34\x75\x00\x08\x00\x2b\x2f\x00\x0b\x06\x00\x1e\x00\x1b\x00\x0c\x3b\x00\x19\x36\x00\x16\x1b\x00\x24\x01\x15\x00\x1e\x00\x1b\x00\x0c\x3b\x00\x08\x36\x00\x05\x38\xff\xee\x31\x00\x0b"
"\x23\x00\x23\x01\x23\x00\x2d\x00\x19\x00\x68\x00\x1a\x75\x00\x09\x00\x07\x70\x23\x01\x23\x00\x2d\x00\x13\x00\x68\x00\x1a\x75\x00\x0a\x00\x07\x72\x23\x01\x23\x00\x2d\x00\x15\x00\x68\x00\x1a\x75\x00\x0b\x00\x07\x01\x23\x01\x23\x00\x2d\x00\x05\x00\x68\x00\x1b"
"\x75\x00\x0c\x00\x09\x26\x00\x02\x23\x01\x23\x00\x2d\x00\x10\x00\x68\x00\x1c\x75\x00\x0d\x00\x08\x01\x0c\x23\x02\x23\x00\x2d\x00\x06\x00\x68\x00\x1c\x68\x00\x1c\x2c\x00\x06\x00\x2d\x00\x05\x00\x68\x00\x1c\x75\x00\x0e\x00\x13\x0c\x36\x00\x08\x26\x00\x03\x38"
"\x00\x05\x26\x00\x04\x23\x01\x23\x00\x2d\x00\x10\x00\x68\x00\x17\x75\x00\x0f\x00\x1d\x0c\x06\x00\x39\x00\x06\x36\x00\x03\x05\x04\x36\x00\x06\x01\x38\x00\x06\x0c\x06\x01\x4e\x0c\x23\x02\x23\x00\x2d\x00\x06\x00\x68\x00\x17\x68\x00\x17\x2c\x00\x06\x00\x2d\x00"
"\x05\x00\x75\x00\x10\x00\x0a\x0c\x1b\x00\x4d\x23\x01\x23\x00\x6a\x00\x1e\x68\x00\x17\x68\x00\x1e\x68\x00\x17\x2d\x00\x1e\x04\x68\x00\x17\x68\x00\x1e\x68\x00\x1f\x2d\x00\x1e\x04\x68\x00\x1f\x68\x00\x1e\x68\x00\x17\x2d\x00\x1e\x04\x68\x00\x1f\x68\x00\x1e\x68"
"\x00\x1f\x2d\x00\x1e\x04\x68\x00\x17\x68\x00\x1e\x68\x00\x17\x2d\x00\x20\x04\x68\x00\x17\x68\x00\x1e\x68\x00\x1f\x2d\x00\x21\x04\x68\x00\x1f\x68\x00\x1e\x68\x00\x17\x2d\x00\x21\x04\x68\x00\x1f\x68\x00\x1e\x68\x00\x1f\x2d\x00\x21\x04\x75\x00\x11\x00\x0a\x0c"
"\x1b\x00\x4e\x23\x01\x23\x00\x6a\x00\x23\x68\x00\x17\x68\x00\x23\x68\x00\x17\x2d\x00\x23\x04\x68\x00\x17\x68\x00\x23\x68\x00\x1f\x2d\x00\x23\x04\x68\x00\x1f\x68\x00\x23\x68\x00\x17\x2d\x00\x23\x04\x68\x00\x1f\x68\x00\x23\x68\x00\x1f\x2d\x00\x23\x04\x68\x00"
"\x17\x68\x00\x23\x68\x00\x17\x2d\x00\x24\x04\x68\x00\x17\x68\x00\x23\x68\x00\x1f\x2d\x00\x24\x04\x68\x00\x1f\x68\x00\x23\x68\x00\x17\x2d\x00\x24\x04\x68\x00\x1f\x68\x00\x23\x68\x00\x1f\x2d\x00\x24\x04\x75\x00\x12\x00\x0a\x0c\x1b\x00\x50\x23\x01\x23\x00\x6a"
"\x00\x26\x68\x00\x17\x68\x00\x26\x68\x00\x17\x2d\x00\x26\x04\x68\x00\x17\x68\x00\x26\x68\x00\x1f\x2d\x00\x26\x04\x68\x00\x1f\x68\x00\x26\x68\x00\x17\x2d\x00\x26\x04\x68\x00\x1f\x68\x00\x26\x68\x00\x1f\x2d\x00\x26\x04\x68\x00\x17\x68\x00\x26\x68\x00\x17\x2d"
"\x00\x27\x04\x68\x00\x17\x68\x00\x26\x68\x00\x1f\x2d\x00\x27\x04\x68\x00\x1f\x68\x00\x26\x68\x00\x17\x2d\x00\x27\x04\x68\x00\x1f\x68\x00\x26\x68\x00\x1f\x2d\x00\x27\x04\x75\x00\x13\x00\x0a\x0c\x1b\x00\x51\x23\x01\x23\x00\x6a\x00\x29\x68\x00\x17\x68\x00\x29"
"\x68\x00\x17\x2d\x00\x29\x04\x68\x00\x17\x68\x00\x29\x68\x00\x1f\x2d\x00\x29\x04\x68\x00\x1f\x68\x00\x29\x68\x00\x17\x2d\x00\x29\x04\x68\x00\x1f\x68\x00\x29\x68\x00\x1f\x2d\x00\x29\x04\x68\x00\x17\x68\x00\x29\x68\x00\x17\x2d\x00\x2a\x04\x68\x00\x17\x68\x00"
"\x29\x68\x00\x1f\x2d\x00\x2a\x04\x68\x00\x1f\x68\x00\x29\x68\x00\x17\x2d\x00\x2a\x04\x68\x00\x1f\x68\x00\x29\x68\x00\x1f\x2d\x00\x2a\x04\x75\x00\x14\x00\x0a\x0c\x1b\x00\x52\x23\x01\x23\x00\x6a\x00\x2c\x68\x00\x17\x68\x00\x2c\x68\x00\x17\x2d\x00\x2c\x04\x68"
"\x00\x17\x68\x00\x2c\x68\x00\x1f\x2d\x00\x2c\x04\x68\x00\x1f\x68\x00\x2c\x68\x00\x17\x2d\x00\x2c\x04\x68\x00\x1f\x68\x00\x2c\x68\x00\x1f\x2d\x00\x2c\x04\x68\x00\x17\x68\x00\x2c\x68\x00\x17\x2d\x00\x2d\x04\x68\x00\x17\x68\x00\x2c\x68\x00\x1f\x2d\x00\x2d\x04"
"\x68\x00\x1f\x68\x00\x2c\x68\x00\x17\x2d\x00\x2d\x04\x68\x00\x1f\x68\x00\x2c\x68\x00\x1f\x2d\x00\x2d\x04\x75\x00\x15\x00\x0a\x0c\x1b\x00\x53\x23\x01\x23\x00\x6a\x00\x2f\x68\x00\x17\x68\x00\x2f\x68\x00\x17\x2d\x00\x2f\x04\x68\x00\x17\x68\x00\x2f\x68\x00\x17"
"\x2d\x00\x30\x04\x75\x00\x16\x00\x0a\x0c\x1b\x00\x54\x23\x01\x23\x00\x6a\x00\x32\x68\x00\x17\x68\x00\x32\x68\x00\x17\x2d\x00\x32\x04\x68\x00\x17\x68\x00\x32\x68\x00\x17\x2d\x00\x33\x04\x75\x00\x17\x00\x0a\x0c\x1b\x00\x55\x23\x01\x23\x00\x6a\x00\x35\x68\x00"
"\x17\x68\x00\x35\x68\x00\x17\x2d\x00\x35\x04\x68\x00\x17\x68\x00\x35\x68\x00\x17\x2d\x00\x36\x04\x75\x00\x18\x00\x0a\x0c\x1b\x00\x57\x23\x01\x23\x00\x6a\x00\x38\x68\x00\x17\x68\x00\x38\x68\x00\x17\x2d\x00\x38\x04\x68\x00\x17\x68\x00\x38\x68\x00\x17\x2d\x00"
"\x39\x04\x75\x00\x19\x00\x0a\x0c\x1b\x00\x58\x23\x01\x23\x00\x6a\x00\x3b\x68\x00\x17\x68\x00\x3b\x68\x00\x17\x2d\x00\x3b\x04\x68\x00\x17\x68\x00\x3b\x68\x00\x17\x2d\x00\x3c\x04\x75\x00\x1a\x00\x0a\x0c\x1b\x00\x56\x23\x01\x23\x00\x6a\x00\x3e\x68\x00\x17\x68"
"\x00\x3e\x68\x00\x17\x2d\x00\x3e\x04\x68\x00\x17\x68\x00\x3e\x68\x00\x17\x2d\x00\x3f\x04\x75\x00\x1b\x00\x0a\x0c\x06\x01\x4d\x23\x01\x23\x00\x6a\x00\x40\x68\x00\x17\x68\x00\x40\x2d\x00\x40\x00\x68\x00\x1f\x68\x00\x40\x2d\x00\x40\x00\x75\x00\x1c\x00\x0a\x0c"
"\x06\x01\x4e\x23\x01\x23\x00\x6a\x00\x41\x68\x00\x17\x68\x00\x41\x2d\x00\x41\x00\x68\x00\x1f\x68\x00\x41\x2d\x00\x41\x00\x75\x00\x1d\x00\x08\x0c\x47\x23\x01\x23\x00\x6a\x00\x42\x68\x00\x17\x68\x00\x42\x2d\x00\x42\x00\x68\x00\x1f\x68\x00\x42\x2d\x00\x42\x00"
"\x75\x00\x1e\x00\x08\x0c\x48\x23\x01\x23\x00\x6a\x00\x43\x68\x00\x17\x68\x00\x43\x2d\x00\x43\x00\x68\x00\x1f\x68\x00\x43\x2d\x00\x43\x00\x75\x00\x1f\x00\x08\x0c\x49\x23\x01\x23\x00\x6a\x00\x44\x68\x00\x17\x68\x00\x44\x2d\x00\x44\x00\x75\x00\x20\x00\x11\x0c"
"\x1b\x00\x3b\x00\x06\x36\x00\x03\x05\x04\x23\x01\x23\x00\x6a\x00\x46\x68\x00\x17\x68\x00\x46\x68\x00\x17\x2d\x00\x46\x04\x68\x00\x17\x68\x00\x46\x68\x00\x1f\x2d\x00\x46\x04\x68\x00\x1f\x68\x00\x46\x68\x00\x17\x2d\x00\x46\x04\x68\x00\x1f\x68\x00\x46\x68\x00"
"\x1f\x2d\x00\x46\x04\x75\x00\x21\x00\x11\x0c\x1b\x00\x39\x00\x06\x36\x00\x03\x05\x04\x23\x01\x23\x00\x6a\x00\x48\x68\x00\x17\x68\x00\x48\x68\x00\x17\x2d\x00\x48\x04\x68\x00\x17\x68\x00\x48\x68\x00\x1f\x2d\x00\x48\x04\x68\x00\x1f\x68\x00\x48\x68\x00\x17\x2d"
"\x00\x48\x04\x68\x00\x1f\x68\x00\x48\x68\x00\x1f\x2d\x00\x48\x04\x23\x00\x77\x00\x21\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x29\x00\x08\x00\x00\x00\x00\x01\x03\x00\x00\x00\x22\x00\x08\x00\x00\x00\x00\x01\x03\x00\x02\x00\x24\x00\x1b\x00\x00\x00\x00\x01\x06"
"\x00\x00\x00\x22\x00\x20\x00\x00\x00\x00\x01\x06\x00\x00\x00\x22\x00\x29\x00\x00\x00\x00\x00\x06\x00\x00\x00\x23\x00\x4f\x00\x00\x00\x00\x01\x07\x00\x01\x00\x24\x00\x8a\x00\x00\x00\x00\x01\x0d\x00\x00\x00\x22\x00\xa3\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x22"
"\x00\xbe\x00\x00\x00\x00\x00\x11\x00\x00\x00\x23\x00\x0d\x01\x00\x00\x00\x00\x18\x00\x00\x00\x22\x00\x0d\x01\x00\x00\x00\x00\x18\x00\x01\x00\x23\x00\x1d\x01\x00\x00\x00\x01\x19\x00\x00\x00\x24\x00\x8c\x01\x00\x00\x00\x00\x1d\x00\x00\x00\x22\x00\xc9\x01\x00"
"\x00\x00\x00\x1d\x00\x00\x00\x22\x00\xfb\x01\x00\x00\x00\x01\x1e\x00\x00\x00\x22\x00\x73\x02\x00\x00\x00\x01\x23\x00\x00\x00\x23\x00\xeb\x02\x00\x00\x00\x01\x26\x00\x00\x00\x22\x00\x63\x03\x00\x00\x00\x01\x29\x00\x00\x00\x22\x00\xdb\x03\x00\x00\x00\x01\x2c"
"\x00\x00\x00\x21\x00\x53\x04\x00\x00\x00\x01\x2f\x00\x00\x00\x22\x00\x7d\x04\x00\x00\x00\x01\x32\x00\x00\x00\x22\x00\xa7\x04\x00\x00\x00\x01\x35\x00\x00\x00\x22\x00\xd1\x04\x00\x00\x00\x01\x38\x00\x00\x00\x22\x00\xfb\x04\x00\x00\x00\x01\x3b\x00\x00\x00\x21"
"\x00\x25\x05\x00\x00\x00\x01\x3e\x00\x00\x00\x21\x00\x4f\x05\x00\x00\x00\x00\x40\x00\x00\x00\x20\x00\x73\x05\x00\x00\x00\x00\x41\x00\x00\x00\x21\x00\x97\x05\x00\x00\x00\x00\x42\x00\x00\x00\x21\x00\xb9\x05\x00\x00\x00\x00\x43\x00\x00\x00\x22\x00\xdb\x05\x00"
"\x00\x00\x00\x44\x00\x00\x00\x22\x00\xf3\x05\x00\x00\x00\x01\x46\x00\x00\x00\x22\x00\x3e\x06\x00\x00\x00\x01\x48\x00\x00\x00\x22\x00\x00\x00\x00\x22\x00\x00\x00\x00\x03\x06\x00\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x08\x00\x00\x00\x05\x00\x02\x00\x01\x00\xcc"
"\xcc\x00\x01\x01\x01\x8a\x00\x00\x00\x05\x00\x0c\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\xa3\x00\x00\x00\x05\x00\x0f\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xbe\x00\x00\x00\x05\x00\x11\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xdc\x00\x00\x00\x05\x00\x13\x00\x00\x00\xcc"
"\xcc\x00\x01\x00\x00\xf2\x00\x00\x00\x05\x00\x15\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x08\x01\x00\x00\x05\x00\x18\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x0d\x01\x00\x00\x06\x00\x18\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x46\x01\x00\x00\x05\x00\x1b\x00\x00\x00\xcc"
"\xcc\x00\x01\x00\x00\x57\x01\x00\x00\x05\x00\x1b\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x68\x01\x00\x00\x05\x00\x1b\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x79\x01\x00\x00\x05\x00\x1c\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x8c\x01\x00\x00\x05\x00\x1d\x00\x00\x00\xcc"
"\xcc\x00\x01\x00\x00\xac\x01\x00\x00\x05\x00\x1d\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xc9\x01\x00\x00\x05\x00\x1d\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xfb\x01\x00\x00\x05\x00\x1d\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x73\x02\x00\x00\x05\x00\x22\x00\x01\x00\xcc"
"\xcc\x00\x01\x01\x01\xeb\x02\x00\x00\x05\x00\x25\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x63\x03\x00\x00\x05\x00\x28\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\xdb\x03\x00\x00\x05\x00\x2b\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x53\x04\x00\x00\x05\x00\x2e\x00\x01\x00\xcc"
"\xcc\x00\x01\x01\x01\x7d\x04\x00\x00\x05\x00\x31\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\xa7\x04\x00\x00\x05\x00\x34\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\xd1\x04\x00\x00\x05\x00\x37\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\xfb\x04\x00\x00\x05\x00\x3a\x00\x01\x00\xcc"
"\xcc\x00\x01\x01\x01\x25\x05\x00\x00\x05\x00\x3d\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x4f\x05\x00\x00\x05\x00\x40\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x73\x05\x00\x00\x05\x00\x41\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x97\x05\x00\x00\x05\x00\x42\x00\x00\x00\xcc"
"\xcc\x00\x01\x00\x00\xb9\x05\x00\x00\x05\x00\x43\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xdb\x05\x00\x00\x05\x00\x44\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\xf3\x05\x00\x00\x05\x00\x45\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x3e\x06\x00\x00\x05\x00\x47\x00\x01\x00\xcc"
"\xcc\x00\x01\x01\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x69\x00\x00\x00\x73\x00\x00\x00\x00\x00\x00\x00\x69\x00\x00\x00\x69\x00\x00\x00\x00\x9b\x00\x00\x00\x00\x9e\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00"
"\x00\x03\x00\x00\x00\x03\x00\x00\x00\x0a\x00\x00\x00\x08\x00\x00\x00\x09\x00\x00\x00\x0b\x00\x00\x00\x04\x00\x00\x00\x18\x00\x00\x00\x09\x00\x00\x00\x1b\x00\x00\x00\x04\x00\x00\x00\x20\x00\x00\x00\x08\x00\x00\x00\x20\x00\x00\x00\x07\x00\x00\x00\x20\x00\x00"
"\x00\x05\x00\x00\x00\x29\x00\x00\x00\x07\x00\x00\x00\x29\x00\x00\x00\x06\x00\x00\x00\x33\x00\x00\x00\x07\x00\x00\x00\x33\x00\x00\x00\x08\x00\x00\x00\x33\x00\x00\x00\x04\x00\x00\x00\x48\x00\x00\x00\x09\x00\x00\x00\x79\x00\x00\x00\x0a\x00\x00\x00\x7b\x00\x00"
"\x00\x03\x00\x00\x00\x82\x00\x00\x00\x0a\x00\x00\x00\x82\x00\x00\x00\x0e\x00\x00\x00\x82\x00\x00\x00\x0c\x00\x00\x00\x85\x00\x00\x00\x0e\x00\x00\x00\x8a\x00\x00\x00\x0d\x00\x00\x00\x92\x00\x00\x00\x0e\x00\x00\x00\x94\x00\x00\x00\x0c\x00\x00\x00\x9b\x00\x00"
"\x00\x0e\x00\x00\x00\x9b\x00\x00\x00\x12\x00\x00\x00\x9b\x00\x00\x00\x10\x00\x00\x00\x9e\x00\x00\x00\x12\x00\x00\x00\xa3\x00\x00\x00\x11\x00\x00\x00\xb0\x00\x00\x00\x12\x00\x00\x00\xb6\x00\x00\x00\x17\x00\x00\x00\xb6\x00\x00\x00\x14\x00\x00\x00\xb9\x00\x00"
"\x00\x17\x00\x00\x00\xbe\x00\x00\x00\x15\x00\x00\x00\xcb\x00\x00\x00\x16\x00\x00\x00\xce\x00\x00\x00\x17\x00\x00\x00\xd4\x00\x00\x00\x19\x00\x00\x00\xea\x00\x00\x00\x1a\x00\x00\x00\x00\x01\x00\x00\x22\x00\x00\x00\x00\x01\x00\x00\x1c\x00\x00\x00\x03\x01\x00"
"\x00\x22\x00\x00\x00\x08\x01\x00\x00\x20\x00\x00\x00\x10\x01\x00\x00\x1d\x00\x00\x00\x1d\x01\x00\x00\x1f\x00\x00\x00\x1d\x01\x00\x00\x1e\x00\x00\x00\x21\x01\x00\x00\x1f\x00\x00\x00\x21\x01\x00\x00\x1d\x00\x00\x00\x34\x01\x00\x00\x20\x00\x00\x00\x38\x01\x00"
"\x00\x22\x00\x00\x00\x4f\x01\x00\x00\x23\x00\x00\x00\x60\x01\x00\x00\x24\x00\x00\x00\x71\x01\x00\x00\x25\x00\x00\x00\x84\x01\x00\x00\x28\x00\x00\x00\x84\x01\x00\x00\x26\x00\x00\x00\x87\x01\x00\x00\x28\x00\x00\x00\x8c\x01\x00\x00\x27\x00\x00\x00\x90\x01\x00"
"\x00\x28\x00\x00\x00\x96\x01\x00\x00\x2a\x00\x00\x00\xa4\x01\x00\x00\x2c\x00\x00\x00\xc1\x01\x00\x00\x30\x00\x00\x00\xc1\x01\x00\x00\x2e\x00\x00\x00\xc4\x01\x00\x00\x30\x00\x00\x00\xc9\x01\x00\x00\x2f\x00\x00\x00\xe2\x01\x00\x00\x30\x00\x00\x00\xe8\x01\x00"
"\x00\x32\x00\x00\x00\xf6\x01\x00\x00\x34\x00\x00\x00\x06\x02\x00\x00\x35\x00\x00\x00\x13\x02\x00\x00\x36\x00\x00\x00\x20\x02\x00\x00\x37\x00\x00\x00\x2d\x02\x00\x00\x38\x00\x00\x00\x3a\x02\x00\x00\x39\x00\x00\x00\x47\x02\x00\x00\x3a\x00\x00\x00\x54\x02\x00"
"\x00\x3b\x00\x00\x00\x61\x02\x00\x00\x3c\x00\x00\x00\x6e\x02\x00\x00\x3e\x00\x00\x00\x7e\x02\x00\x00\x3f\x00\x00\x00\x8b\x02\x00\x00\x40\x00\x00\x00\x98\x02\x00\x00\x41\x00\x00\x00\xa5\x02\x00\x00\x42\x00\x00\x00\xb2\x02\x00\x00\x43\x00\x00\x00\xbf\x02\x00"
"\x00\x44\x00\x00\x00\xcc\x02\x00\x00\x45\x00\x00\x00\xd9\x02\x00\x00\x46\x00\x00\x00\xe6\x02\x00\x00\x48\x00\x00\x00\xf6\x02\x00\x00\x49\x00\x00\x00\x03\x03\x00\x00\x4a\x00\x00\x00\x10\x03\x00\x00\x4b\x00\x00\x00\x1d\x03\x00\x00\x4c\x00\x00\x00\x2a\x03\x00"
"\x00\x4d\x00\x00\x00\x37\x03\x00\x00\x4e\x00\x00\x00\x44\x03\x00\x00\x4f\x00\x00\x00\x51\x03\x00\x00\x50\x00\x00\x00\x5e\x03\x00\x00\x52\x00\x00\x00\x6e\x03\x00\x00\x53\x00\x00\x00\x7b\x03\x00\x00\x54\x00\x00\x00\x88\x03\x00\x00\x55\x00\x00\x00\x95\x03\x00"
"\x00\x56\x00\x00\x00\xa2\x03\x00\x00\x57\x00\x00\x00\xaf\x03\x00\x00\x58\x00\x00\x00\xbc\x03\x00\x00\x59\x00\x00\x00\xc9\x03\x00\x00\x5a\x00\x00\x00\xd6\x03\x00\x00\x5c\x00\x00\x00\xe6\x03\x00\x00\x5d\x00\x00\x00\xf3\x03\x00\x00\x5e\x00\x00\x00\x00\x04\x00"
"\x00\x5f\x00\x00\x00\x0d\x04\x00\x00\x60\x00\x00\x00\x1a\x04\x00\x00\x61\x00\x00\x00\x27\x04\x00\x00\x62\x00\x00\x00\x34\x04\x00\x00\x63\x00\x00\x00\x41\x04\x00\x00\x64\x00\x00\x00\x4e\x04\x00\x00\x66\x00\x00\x00\x5e\x04\x00\x00\x67\x00\x00\x00\x6b\x04\x00"
"\x00\x68\x00\x00\x00\x78\x04\x00\x00\x6a\x00\x00\x00\x88\x04\x00\x00\x6b\x00\x00\x00\x95\x04\x00\x00\x6c\x00\x00\x00\xa2\x04\x00\x00\x6e\x00\x00\x00\xb2\x04\x00\x00\x6f\x00\x00\x00\xbf\x04\x00\x00\x70\x00\x00\x00\xcc\x04\x00\x00\x72\x00\x00\x00\xdc\x04\x00"
"\x00\x73\x00\x00\x00\xe9\x04\x00\x00\x74\x00\x00\x00\xf6\x04\x00\x00\x76\x00\x00\x00\x06\x05\x00\x00\x77\x00\x00\x00\x13\x05\x00\x00\x78\x00\x00\x00\x20\x05\x00\x00\x7a\x00\x00\x00\x30\x05\x00\x00\x7b\x00\x00\x00\x3d\x05\x00\x00\x7c\x00\x00\x00\x4a\x05\x00"
"\x00\x7e\x00\x00\x00\x5a\x05\x00\x00\x7f\x00\x00\x00\x64\x05\x00\x00\x80\x00\x00\x00\x6e\x05\x00\x00\x82\x00\x00\x00\x7e\x05\x00\x00\x83\x00\x00\x00\x88\x05\x00\x00\x84\x00\x00\x00\x92\x05\x00\x00\x86\x00\x00\x00\xa0\x05\x00\x00\x87\x00\x00\x00\xaa\x05\x00"
"\x00\x88\x00\x00\x00\xb4\x05\x00\x00\x8a\x00\x00\x00\xc2\x05\x00\x00\x8b\x00\x00\x00\xcc\x05\x00\x00\x8c\x00\x00\x00\xd6\x05\x00\x00\x8e\x00\x00\x00\xe4\x05\x00\x00\x8f\x00\x00\x00\xee\x05\x00\x00\x92\x00\x00\x00\x05\x06\x00\x00\x93\x00\x00\x00\x12\x06\x00"
"\x00\x94\x00\x00\x00\x1f\x06\x00\x00\x95\x00\x00\x00\x2c\x06\x00\x00\x96\x00\x00\x00\x39\x06\x00\x00\x98\x00\x00\x00\x50\x06\x00\x00\x99\x00\x00\x00\x5d\x06\x00\x00\x9a\x00\x00\x00\x6a\x06\x00\x00\x9b\x00\x00\x00\x77\x06\x00\x00\x9c\x00\x00\x00\x84\x06\x00"
"\x00\x9e\x00\x00\x00\x00\x01\x2a\x00\x00\x00\x03\x27\x00\x00\x00\x06\x73\x6f\x75\x72\x63\x65\x26\x00\x00\x00\x11\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\x70\x2f\x69\x6e\x2e\x78\x74\x61\x6c\x27\x00\x00\x00\x0b\x69\x64\x65\x6e\x74\x69\x66\x69\x65\x72\x73\x28\x00\x00"
"\x00\x49\x27\x00\x00\x00\x00\x27\x00\x00\x00\x03\x41\x6e\x79\x27\x00\x00\x00\x06\x76\x61\x6c\x75\x65\x73\x27\x00\x00\x00\x08\x69\x74\x65\x72\x61\x74\x6f\x72\x27\x00\x00\x00\x02\x69\x74\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b\x5f\x66\x69\x72\x73\x74\x27\x00"
"\x00\x00\x0a\x62\x6c\x6f\x63\x6b\x5f\x6e\x65\x78\x74\x27\x00\x00\x00\x01\x65\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b\x5f\x63\x61\x74\x63\x68\x27\x00\x00\x00\x0b\x62\x6c\x6f\x63\x6b\x5f\x62\x72\x65\x61\x6b\x27\x00\x00\x00\x05\x6f\x70\x5f\x69\x6e\x27\x00\x00"
"\x00\x05\x41\x72\x72\x61\x79\x03\x00\x00\x00\x08\x27\x00\x00\x00\x01\x76\x27\x00\x00\x00\x03\x53\x65\x74\x27\x00\x00\x00\x0b\x6f\x62\x6a\x65\x63\x74\x5f\x6e\x61\x6d\x65\x27\x00\x00\x00\x04\x74\x6f\x5f\x73\x27\x00\x00\x00\x07\x70\x72\x69\x6e\x74\x6c\x6e\x27"
"\x00\x00\x00\x01\x70\x27\x00\x00\x00\x07\x6f\x70\x5f\x74\x6f\x5f\x61\x27\x00\x00\x00\x04\x74\x6f\x5f\x61\x27\x00\x00\x00\x07\x6f\x70\x5f\x74\x6f\x5f\x6d\x27\x00\x00\x00\x04\x74\x6f\x5f\x6d\x27\x00\x00\x00\x03\x49\x6e\x74\x27\x00\x00\x00\x01\x69\x27\x00\x00"
"\x00\x05\x74\x69\x6d\x65\x73\x27\x00\x00\x00\x04\x4e\x75\x6c\x6c\x27\x00\x00\x00\x09\x55\x6e\x64\x65\x66\x69\x6e\x65\x64\x27\x00\x00\x00\x04\x42\x6f\x6f\x6c\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x61\x64\x64\x27\x00\x00\x00\x05\x46\x6c\x6f\x61"
"\x74\x27\x00\x00\x00\x0d\x6f\x70\x5f\x61\x64\x64\x5f\x61\x73\x73\x69\x67\x6e\x27\x00\x00\x00\x0c\x6f\x70\x5f\x61\x64\x64\x5f\x61\x73\x73\x69\x67\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x73\x75\x62\x27\x00\x00\x00\x0d\x6f\x70\x5f\x73\x75\x62\x5f"
"\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x6d\x75\x6c\x27\x00\x00\x00\x0d\x6f\x70\x5f\x6d\x75\x6c\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x64\x69\x76\x27\x00\x00\x00\x0d\x6f\x70\x5f"
"\x64\x69\x76\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x6d\x6f\x64\x27\x00\x00\x00\x0d\x6f\x70\x5f\x6d\x6f\x64\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x61\x6e\x64\x27\x00\x00\x00"
"\x0d\x6f\x70\x5f\x61\x6e\x64\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x05\x6f\x70\x5f\x6f\x72\x27\x00\x00\x00\x0c\x6f\x70\x5f\x6f\x72\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x78\x6f\x72\x27\x00"
"\x00\x00\x0d\x6f\x70\x5f\x78\x6f\x72\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x73\x68\x72\x27\x00\x00\x00\x0d\x6f\x70\x5f\x73\x68\x72\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x07\x6f\x70\x5f\x75"
"\x73\x68\x72\x27\x00\x00\x00\x0e\x6f\x70\x5f\x75\x73\x68\x72\x5f\x61\x73\x73\x69\x67\x6e\x03\x00\x00\x00\x12\x27\x00\x00\x00\x06\x6f\x70\x5f\x73\x68\x6c\x27\x00\x00\x00\x0d\x6f\x70\x5f\x73\x68\x6c\x5f\x61\x73\x73\x69\x67\x6e\x27\x00\x00\x00\x06\x6f\x70\x5f"
"\x69\x6e\x63\x27\x00\x00\x00\x06\x6f\x70\x5f\x64\x65\x63\x27\x00\x00\x00\x06\x6f\x70\x5f\x70\x6f\x73\x27\x00\x00\x00\x06\x6f\x70\x5f\x6e\x65\x67\x27\x00\x00\x00\x06\x6f\x70\x5f\x63\x6f\x6d\x03\x00\x00\x00\x12\x27\x00\x00\x00\x05\x6f\x70\x5f\x6c\x74\x03\x00"
"\x00\x00\x12\x27\x00\x00\x00\x05\x6f\x70\x5f\x65\x71\x03\x00\x00\x00\x08\x28\x00\x00\x00\x05\x20\x00\x01\x28\x00\x00\x00\x03\x29\x00\x00\x00\x02\x27\x00\x00\x00\x03\x6c\x69\x62\x20\x29\x00\x00\x00\x02\x27\x00\x00\x00\x07\x62\x75\x69\x6c\x74\x69\x6e\x20\x29"
"\x00\x00\x00\x02\x27\x00\x00\x00\x06\x46\x6f\x72\x6d\x61\x74\x20\x2a\x00\x00\x00\x02\x01\x28\x00\x00\x00\x03\x29\x00\x00\x00\x02\x03\x00\x00\x00\x46\x20\x29\x00\x00\x00\x02\x03\x00\x00\x00\x48\x20\x29\x00\x00\x00\x02\x03\x00\x00\x00\x07\x20\x20\x03\x00\x00"
"\x00\x43\x26\x00\x00\x00\x04\x3c\x25\x73\x3e\x26\x00\x00\x00\x09\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x26\x00\x00\x00\x04\x74\x72\x75\x65\x26\x00\x00\x00\x05\x66\x61\x6c\x73\x65"
);


	Xemb((

Iterator::scan: method(pattern) fiber{
	exec: xpeg::Executor(this);
	while(exec.match(pattern)){
		yield exec;
	}	
}

Iterator::ip: method(n:3){
	m: MemoryStream();
	m.put_s("<[");
	a: this.take(n+1)[];
	m.put_s(a.take(n).join(","));
	if(a.length==n+1){
		m.put_s(" ...]>")
	}
	else{
		m.put_s("]>");
	}
	m.to_s.p;
	return chain(a.each, this);
}

Iterator::op_to_a: method{
	ret: [];
	this{
		ret.push_back(it); 
	}
	return ret;
}

Iterator::op_to_m: method{
	ret: [:];
	this{ |key, value|
		ret[key] = value; 
	}
	return ret;
}

Iterator::reverse: method{
	return this[].reverse;
}

Iterator::join: method(sep: ""){
	ret: MemoryStream();
	if(sep==""){
		this{
			ret.put_s(it.to_s);
		}
	}
	else{
		this{
			if(!first_step){
				ret.put_s(sep);
			}
			ret.put_s(it.to_s);
		}
	}
		
	return ret.to_s;
}

Iterator::with_index: method(start: 0) fiber{
	i: start;
	this{
		yield i, it;
		++i;
	}
}

Iterator::collect: method(conv) fiber{
	this{
		yield conv(it);
	}
}


Iterator::map: Iterator::collect;

Iterator::select: method(pred) fiber{
	this{
		if(pred(it)){
			yield it;
		}
	}
}

Iterator::filter: Iterator::select;

Iterator::break_if: method(pred) fiber{
	this{
		if(pred(it))
			break;
		yield it;
	}
}

Iterator::take: method(times){
	if(times<=0){
		return null;
	}

	return fiber{
		i: 0;
		this{
			yield it;
			i++;

			if(i>=times){
				break;
			}
		}
	}
}

Iterator::zip: method(...){
	return builtin::zip(this, ...);
}

Iterator::unique: method(pred: null){
	if(pred){
		return fiber{
			prev: undefined;
			this{
				if(!pred(it, prev)){
					yield it;
					prev = it;
				}
			}
		}
	}

	return fiber{
		prev: undefined;
		this{
			if(prev!=it){
				yield it;
				prev = it;
			}
		}
	}
}

builtin::chain: fun(...){
	arg: ...;
	return fiber{
		arg.ordered_arguments{
			it{
				yield it;
			}
		}
	}
}

Iterator::chain: method(...){
	return builtin::chain(this, ...);
}

Iterator::cycle: method fiber{
	temp: [];
	this{
		temp.push_back(it);
		yield it;
	}
	
	for(;;){
		temp{
			yield it;
		}
	}
}

Iterator::max_element: method(pred: null){
	item: null;
	if(pred){
		this{
			if(item){
				if(pred(it, item))
					item = it;
			}
			else{
				item = it;
			}
		}
		return item;
	}

	this{
		if(item){
			if(item<it)
				item = it;
		}
		else{
			item = it;
		}
	}
	return item;
}

Iterator::min_element: method(pred: null){
	item: null;
	if(pred){
		this{
			if(item){
				if(pred(it, item))
					item = it;
			}
			else{
				item = it;
			}
		}
		return item;
	}

	this{
		if(item){
			if(item>it)
				item = it;
		}
		else{
			item = it;
		}
	}
	return item;
}

Iterator::find: method(pred){
	this{
		if(pred(it)){
			return it;
		}
	}
}

Iterator::inject: method(init, fn){
	result: init;
	this{
		result = fn(result, it);
	}
	return result;
}

Iterator::with_prev: method fiber{
	prev: undefined;
	this{
		yield prev, it;
		prev = it;
	}
}

builtin::ClassicIterator: class{
	_current;
	_source;

	initialize: method(source){ _source, _current = source.block_first; }
	current: method _current;
	has_next: method !!_source;
	is_done: method !_source;
	next: method{ _source, _current = _source.block_next; }
	source: method _source;
}

Iterator::classic: method ClassicIterator(this);

builtin::range: fun(first, last, step:1){
	if(step==1){
		return fiber{
			for(i:first; i<last; i++){
				yield i;
			}
		}
	}
	else{
		return fiber{
			for(i:first; i<last; i+=step){
				yield i;
			}
		}
	}
}
	),
""
);


	Xemb((

String::scan: method(pattern){
	return StringStream(this).scan(pattern);
}

String::split: method(pattern){
	return StringStream(this).split(pattern);
}

String::match: method(pattern){
	return StringStream(this).match(pattern);
}

String::gsub: method(pattern, fn){
	mm: MemoryStream();
	exec: xpeg::Executor(StringStream(this));
	if(exec.match(pattern)){
		prefix: exec.prefix;
		mm.put_s(prefix);
		ordered: [exec[""]];
		ordered.concat(exec.captures);
		named: exec.named_captures[:];
		named["prefix"] = prefix;
		mm.put_s(fn(...Arguments(ordered, named)));

		while(exec.match(pattern)){
			prefix: exec.prefix;
			mm.put_s(prefix);
			ordered: [exec[""]];
			ordered.concat(exec.captures);
			named: exec.named_captures[:];
			named["prefix"] = prefix;
			mm.put_s(fn(...Arguments(ordered, named)));
		}
		mm.put_s(exec.suffix);
		return mm.to_s;
	}
	else{
		return this;
	}
}

String::sub: method(pattern, fn){
	mm: MemoryStream();
	exec: xpeg::Executor(StringStream(this));
	if(exec.match(pattern)){
		prefix: exec.prefix;
		suffix: exec.suffix;
		mm.put_s(prefix);
		ordered: [exec[""]];
		ordered.concat(exec.captures);
		named: exec.named_captures[:];
		named["prefix"] = prefix;
		named["suffix"] = suffix;
		mm.put_s(fn(...Arguments(ordered, named)));
		mm.put_s(exec.suffix);
		return mm.to_s;
	}
	else{
		return this;
	}
}

Stream::match: method(pattern){
	exec: xpeg::Executor(this);
	if(exec.match(pattern)){
		return exec;
	}
	return null;
}

Stream::scan: method(pattern) fiber{
	exec: xpeg::Executor(this);
	while(exec.match(pattern)){
		yield exec;
	}
}

Stream::split: method(pattern) fiber{
	exec: xpeg::Executor(this);
	if(exec.match(pattern)){
		yield exec.prefix;
		while(exec.match(pattern)){
			yield exec.prefix;
		}
		yield exec.suffix;
	}
	else{
		yield this.to_s;
	}
}

Mutex::block_first: method{
	this.lock;
	return this;
}

Mutex::block_next: method{
	this.unlock;
	return null;
}

Mutex::block_break: method{
	this.unlock;
	return null;
}

Class::ancestors: method{
	if(this===Any){
		return null;
	}			
	
	return fiber{
		this.inherited_classes{
			yield it;
			it.ancestors{
				yield it;
			}
		}

		yield Any;
	}
}

Class::members: method(inherited_too: true){
	if(!inherited_too){
		return Frame::members();
	}

	return fiber{
		this.members(false){
			yield it;
		}

		this.ancestors{
			it.members(false){
				yield it;
			}
		}
	}
}

Array::block_first: method this.each.block_first;

Array::join: method(sep: ""){
	sep = sep.to_s;
	ms: MemoryStream();
	if(sep===""){
		this.each{
			ms.put_s(it.to_s);
		}
	}
	else{
		this.each{
			if(!first_step){
				ms.put_s(sep);
			}
			ms.put_s(it.to_s);
		}
	}
	return ms.to_s;
}

Array::to_s: method{
	return %f([%s])(this.join(", "));
}

MultiValue::to_s: method{
	return %f((%s))(this.join(", "));
}

Arguments::each: method{
	return fiber{ 
		this.ordered_arguments.with_index{ |i, v|
			yield i, v;
		}
		this.named_arguments{ |i, v|
			yield i, v;
		}
	}
}

Arguments::pairs: Arguments::each;

Fun::call: method(...){
	return this(...);
}

Map::block_first: method this.each.block_first;

Map::to_s: method{
	if(this.is_empty){
		return "[:]";
	}

	ms: MemoryStream();
	ms.put_s("[");
	this.each{ |k, v|
		if(!first_step){
			ms.put_s(",");
		}

		ms.put_s(k.to_s);
		ms.put_s(":");
		ms.put_s(v.to_s);
	}
	ms.put_s("]");
	return ms.to_s;
}

Set::to_s: method{
	return this.each_key[].to_s;
}
	),
"\x78\x74\x61\x6c\x01\x00\x00\x00\x00\x00\x02\x80\x68\x00\x01\x75\x00\x01\x00\x16\x1b\x00\x0c\x68\x00\x03\x2a\x01\x00\x01\x00\x2b\x01\x00\x01\x01\x00\x04\x23\x00\x2d\x00\x04\x00\x68\x00\x01\x75\x00\x02\x00\x16\x1b\x00\x0c\x68\x00\x03\x2a\x01\x00\x01\x00\x2b"
"\x01\x00\x01\x01\x00\x06\x23\x00\x2d\x00\x06\x00\x68\x00\x01\x75\x00\x03\x00\x16\x1b\x00\x0c\x68\x00\x03\x2a\x01\x00\x01\x00\x2b\x01\x00\x01\x01\x00\x08\x23\x00\x2d\x00\x08\x00\x68\x00\x01\x75\x00\x04\x01\x3d\x2f\x00\x04\x68\x00\x0d\x2a\x00\x00\x01\x00\x1e"
"\x01\x0c\x68\x00\x03\x2a\x01\x00\x01\x00\x68\x00\x0e\x2c\x00\x0f\x00\x2a\x01\x00\x01\x00\x1e\x00\x1b\x03\x1b\x00\x2b\x01\x00\x01\x00\x00\x08\x36\x01\x00\x2f\x00\x05\x1b\x03\x28\x00\x13\x00\x1e\x02\x1b\x02\x1b\x04\x2b\x01\x00\x00\x00\x00\x14\x70\x1b\x03\x26"
"\x00\x01\x4b\x71\x1e\x01\x1b\x03\x28\x00\x15\x00\x1b\x01\x2b\x01\x00\x00\x00\x00\x16\x1b\x03\x28\x00\x17\x00\x28\x00\x18\x00\x1e\x00\x1b\x02\x1b\x00\x26\x00\x02\x4c\x1b\x01\x1b\x00\x68\x00\x19\x2a\x02\x00\x01\x00\x1b\x05\x2a\x00\x00\x01\x02\x1b\x04\x2b\x01"
"\x00\x00\x00\x00\x14\x1b\x06\x1b\x03\x2b\x01\x00\x01\x00\x00\x08\x36\x00\x75\x2f\x00\x07\x1b\x06\x28\x00\x13\x00\x1e\x02\x1b\x02\x1b\x07\x2b\x01\x00\x00\x00\x00\x14\x70\x1b\x06\x26\x00\x01\x4b\x71\x1e\x01\x1b\x06\x28\x00\x15\x00\x1b\x01\x2b\x01\x00\x00\x00"
"\x00\x16\x1b\x06\x28\x00\x17\x00\x28\x00\x18\x00\x1e\x00\x1b\x02\x1b\x00\x26\x00\x02\x4c\x1b\x01\x1b\x00\x68\x00\x19\x2a\x02\x00\x01\x00\x1b\x08\x2a\x00\x00\x01\x02\x1b\x07\x2b\x01\x00\x00\x00\x00\x14\x31\x00\x07\x1b\x06\x1b\x03\x2b\x01\x00\x01\x00\x00\x08"
"\x36\x00\x05\x38\xff\x8f\x1b\x03\x28\x00\x1d\x00\x1b\x04\x2b\x01\x00\x00\x00\x00\x14\x1b\x04\x2b\x00\x00\x01\x01\x00\x1e\x31\x00\x05\x38\x00\x08\x0c\x31\x00\x04\x23\x01\x31\x00\x04\x23\x00\x2d\x00\x1f\x00\x68\x00\x01\x75\x00\x05\x00\xcc\x2f\x00\x09\x68\x00"
"\x0d\x2a\x00\x00\x01\x00\x1e\x01\x0c\x68\x00\x03\x2a\x01\x00\x01\x00\x68\x00\x0e\x2c\x00\x0f\x00\x2a\x01\x00\x01\x00\x1e\x00\x1b\x03\x1b\x00\x2b\x01\x00\x01\x00\x00\x08\x36\x00\x8f\x2f\x00\x0a\x1b\x04\x28\x00\x13\x00\x1e\x03\x1b\x04\x28\x00\x1d\x00\x1e\x02"
"\x1b\x03\x1b\x05\x2b\x01\x00\x00\x00\x00\x14\x70\x1b\x04\x26\x00\x01\x4b\x71\x1e\x01\x1b\x04\x28\x00\x15\x00\x1b\x01\x2b\x01\x00\x00\x00\x00\x16\x1b\x04\x28\x00\x17\x00\x28\x00\x18\x00\x1e\x00\x1b\x03\x1b\x00\x26\x00\x02\x4c\x1b\x02\x1b\x00\x26\x00\x03\x4c"
"\x1b\x01\x1b\x00\x68\x00\x19\x2a\x02\x00\x01\x00\x1b\x06\x2a\x00\x00\x01\x02\x1b\x05\x2b\x01\x00\x00\x00\x00\x14\x1b\x04\x28\x00\x1d\x00\x1b\x05\x2b\x01\x00\x00\x00\x00\x14\x1b\x05\x2b\x00\x00\x01\x01\x00\x1e\x31\x00\x0a\x38\x00\x08\x0c\x31\x00\x09\x23\x01"
"\x31\x00\x09\x23\x00\x2d\x00\x28\x00\x23\x00\x77\x00\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa2\x00\x08\x00\x00\x00\x00\x01\x03\x00\x00\x00\x9d\x00\x28\x00\x00\x00\x00\x01\x06\x00\x00\x00\x9d\x00\x48\x00\x00\x00\x00\x01\x08\x00\x00\x00\x9c\x00\x68\x00"
"\x00\x00\x00\x01\x0b\x00\x02\x00\x9d\x00\x9a\x00\x00\x00\x00\x01\x10\x00\x03\x00\x9c\x00\xf9\x00\x00\x00\x00\x01\x1a\x00\x00\x00\x9d\x00\x07\x01\x00\x00\x00\x01\x1a\x00\x03\x00\x9d\x00\x98\x01\x00\x00\x00\x00\x1f\x00\x00\x00\x9d\x00\xaf\x01\x00\x00\x00\x01"
"\x22\x00\x02\x00\x9c\x00\xe1\x01\x00\x00\x00\x01\x24\x00\x04\x00\x9c\x00\x6e\x02\x00\x00\x00\x00\x28\x00\x00\x00\x9c\x00\x00\x00\x00\x06\x00\x00\x00\x00\x03\x06\x00\x00\x00\x00\xcc\xcc\x00\x01\x00\x00\x08\x00\x00\x00\x05\x00\x02\x00\x01\x00\xcc\xcc\x00\x01"
"\x01\x01\x28\x00\x00\x00\x05\x00\x05\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x48\x00\x00\x00\x05\x00\x07\x00\x01\x00\xcc\xcc\x00\x01\x01\x01\x68\x00\x00\x00\x05\x00\x09\x00\x02\x00\xcc\xcc\x00\x01\x02\x02\xaf\x01\x00\x00\x05\x00\x20\x00\x02\x00\xcc\xcc\x00\x01"
"\x02\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x1a\x00\x00\x00\x05\x00"
"\x00\x00\x20\x00\x00\x00\x09\x00\x00\x00\x20\x00\x00\x00\x07\x00\x00\x00\x23\x00\x00\x00\x09\x00\x00\x00\x28\x00\x00\x00\x08\x00\x00\x00\x3a\x00\x00\x00\x09\x00\x00\x00\x40\x00\x00\x00\x0d\x00\x00\x00\x40\x00\x00\x00\x0b\x00\x00\x00\x43\x00\x00\x00\x0d\x00"
"\x00\x00\x48\x00\x00\x00\x0c\x00\x00\x00\x5a\x00\x00\x00\x0d\x00\x00\x00\x60\x00\x00\x00\x2a\x00\x00\x00\x60\x00\x00\x00\x0f\x00\x00\x00\x63\x00\x00\x00\x2a\x00\x00\x00\x6b\x00\x00\x00\x10\x00\x00\x00\x75\x00\x00\x00\x11\x00\x00\x00\x8c\x00\x00\x00\x29\x00"
"\x00\x00\x8c\x00\x00\x00\x12\x00\x00\x00\x9a\x00\x00\x00\x26\x00\x00\x00\x9d\x00\x00\x00\x13\x00\x00\x00\xa5\x00\x00\x00\x14\x00\x00\x00\xb0\x00\x00\x00\x15\x00\x00\x00\xba\x00\x00\x00\x16\x00\x00\x00\xc9\x00\x00\x00\x17\x00\x00\x00\xd5\x00\x00\x00\x18\x00"
"\x00\x00\xdd\x00\x00\x00\x19\x00\x00\x00\xf9\x00\x00\x00\x24\x00\x00\x00\xf9\x00\x00\x00\x1b\x00\x00\x00\x07\x01\x00\x00\x23\x00\x00\x00\x0a\x01\x00\x00\x1c\x00\x00\x00\x12\x01\x00\x00\x1d\x00\x00\x00\x1d\x01\x00\x00\x1e\x00\x00\x00\x27\x01\x00\x00\x1f\x00"
"\x00\x00\x36\x01\x00\x00\x20\x00\x00\x00\x42\x01\x00\x00\x21\x00\x00\x00\x4a\x01\x00\x00\x22\x00\x00\x00\x69\x01\x00\x00\x23\x00\x00\x00\x69\x01\x00\x00\x1b\x00\x00\x00\x7a\x01\x00\x00\x24\x00\x00\x00\x89\x01\x00\x00\x25\x00\x00\x00\x95\x01\x00\x00\x26\x00"
"\x00\x00\x98\x01\x00\x00\x29\x00\x00\x00\x98\x01\x00\x00\x28\x00\x00\x00\x9e\x01\x00\x00\x29\x00\x00\x00\xa1\x01\x00\x00\x2a\x00\x00\x00\xa7\x01\x00\x00\x3f\x00\x00\x00\xa7\x01\x00\x00\x2c\x00\x00\x00\xaa\x01\x00\x00\x3f\x00\x00\x00\xb2\x01\x00\x00\x2d\x00"
"\x00\x00\xbc\x01\x00\x00\x2e\x00\x00\x00\xd3\x01\x00\x00\x3e\x00\x00\x00\xd3\x01\x00\x00\x2f\x00\x00\x00\xe1\x01\x00\x00\x3b\x00\x00\x00\xe4\x01\x00\x00\x30\x00\x00\x00\xec\x01\x00\x00\x31\x00\x00\x00\xf4\x01\x00\x00\x32\x00\x00\x00\xff\x01\x00\x00\x33\x00"
"\x00\x00\x09\x02\x00\x00\x34\x00\x00\x00\x18\x02\x00\x00\x35\x00\x00\x00\x24\x02\x00\x00\x36\x00\x00\x00\x2c\x02\x00\x00\x37\x00\x00\x00\x34\x02\x00\x00\x38\x00\x00\x00\x50\x02\x00\x00\x39\x00\x00\x00\x5f\x02\x00\x00\x3a\x00\x00\x00\x6b\x02\x00\x00\x3b\x00"
"\x00\x00\x6e\x02\x00\x00\x3e\x00\x00\x00\x6e\x02\x00\x00\x3d\x00\x00\x00\x74\x02\x00\x00\x3e\x00\x00\x00\x77\x02\x00\x00\x3f\x00\x00\x00\x7d\x02\x00\x00\x40\x00\x00\x00\x00\x01\x2a\x00\x00\x00\x03\x27\x00\x00\x00\x06\x73\x6f\x75\x72\x63\x65\x26\x00\x00\x00"
"\x11\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\x70\x2f\x69\x6e\x2e\x78\x74\x61\x6c\x27\x00\x00\x00\x0b\x69\x64\x65\x6e\x74\x69\x66\x69\x65\x72\x73\x28\x00\x00\x00\x29\x27\x00\x00\x00\x00\x27\x00\x00\x00\x06\x53\x74\x72\x69\x6e\x67\x27\x00\x00\x00\x07\x70\x61\x74\x74"
"\x65\x72\x6e\x27\x00\x00\x00\x0c\x53\x74\x72\x69\x6e\x67\x53\x74\x72\x65\x61\x6d\x27\x00\x00\x00\x04\x73\x63\x61\x6e\x03\x00\x00\x00\x08\x27\x00\x00\x00\x05\x73\x70\x6c\x69\x74\x03\x00\x00\x00\x08\x27\x00\x00\x00\x05\x6d\x61\x74\x63\x68\x03\x00\x00\x00\x08"
"\x27\x00\x00\x00\x02\x66\x6e\x27\x00\x00\x00\x02\x6d\x6d\x27\x00\x00\x00\x04\x65\x78\x65\x63\x27\x00\x00\x00\x0c\x4d\x65\x6d\x6f\x72\x79\x53\x74\x72\x65\x61\x6d\x27\x00\x00\x00\x04\x78\x70\x65\x67\x27\x00\x00\x00\x08\x45\x78\x65\x63\x75\x74\x6f\x72\x27\x00"
"\x00\x00\x06\x70\x72\x65\x66\x69\x78\x27\x00\x00\x00\x07\x6f\x72\x64\x65\x72\x65\x64\x27\x00\x00\x00\x05\x6e\x61\x6d\x65\x64\x03\x00\x00\x00\x13\x27\x00\x00\x00\x05\x70\x75\x74\x5f\x73\x27\x00\x00\x00\x08\x63\x61\x70\x74\x75\x72\x65\x73\x27\x00\x00\x00\x06"
"\x63\x6f\x6e\x63\x61\x74\x27\x00\x00\x00\x0e\x6e\x61\x6d\x65\x64\x5f\x63\x61\x70\x74\x75\x72\x65\x73\x27\x00\x00\x00\x07\x6f\x70\x5f\x74\x6f\x5f\x6d\x27\x00\x00\x00\x09\x41\x72\x67\x75\x6d\x65\x6e\x74\x73\x03\x00\x00\x00\x13\x03\x00\x00\x00\x14\x03\x00\x00"
"\x00\x15\x27\x00\x00\x00\x06\x73\x75\x66\x66\x69\x78\x27\x00\x00\x00\x04\x74\x6f\x5f\x73\x27\x00\x00\x00\x04\x67\x73\x75\x62\x03\x00\x00\x00\x08\x03\x00\x00\x00\x0d\x03\x00\x00\x00\x0e\x03\x00\x00\x00\x0f\x03\x00\x00\x00\x13\x03\x00\x00\x00\x1c\x03\x00\x00"
"\x00\x14\x03\x00\x00\x00\x15\x27\x00\x00\x00\x03\x73\x75\x62\x27\x00\x00\x00\x06\x76\x61\x6c\x75\x65\x73\x28\x00\x00\x00\x04\x20\x03\x00\x00\x00\x06\x03\x00\x00\x00\x13\x03\x00\x00\x00\x1c"
);

}

}
