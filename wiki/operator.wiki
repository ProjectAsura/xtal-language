=その他の演算子=

==論理和演算子==
 _expr_ *`||`* _expr_ 

{{{
a || b
}}}
aを評価して、それがnullでないなら、その評価した値を返します。
nullならbを評価してその値を返します。

==論理積演算子==
 _expr_ *`&&`* _expr_

{{{
a && b
}}}
aを評価して、それがnullでないなら、bを評価しその値を返します。
nullならそのままnullを返します。

==三項演算子==
 _expr_ *?* _expr_ *`:`* _expr_

{{{
a<10 ? 1: 2
}}}
aが10より小さいなら1を、そうでないなら2を返します。

==once演算子==
 once _expr_

{{{
once [5, 6, 7]
}}}

once演算子は、式の評価を最初の一度だけする演算子です。

{{{
foo: fun(){
 return once [0, 1, 2, 3];
}
}}}
もしonceを付けない場合、この関数は呼び出すたびに違う配列オブジェクトを生成して返しますが、
onceで一度しか評価しないとしているため、何度呼び出しても同じ配列オブジェクトを返します。

==static演算子==
 static _expr_

static演算子はコンパイル時に式を評価しておく演算子です。

仮にtimeという、現在の日時を返す関数があるとします。
すると次の例はコンパイル時間を表示することになります。

{{{
println(static time());
}}}
残念ながら、static演算子は現在はまだ未実装であり、当分は実装されることもありません。