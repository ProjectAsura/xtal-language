==演算子の優先順位==

||優 	||結 	||演算子 	||意味||
||15 	||左 	||`a.b` 	||オブジェクトメンバアクセス||
||15 	||左 	||`a[b]` 	||配列要素アクセス||
||15 	||左 	||`a()` 	||関数呼び出し||
||14 	||右 	||`+a` 	||||
||14 	||右 	||`-a` 	||符号反転||
||14 	||右 	||`~a` 	||ビット単位の反転||
||14 	||右 	||`!a` 	||論理否定||
||13 	||左 	||`a*b` 	||乗算||
||13 	||左 	||`a/b` 	||除算||
||13 	||左 	||`a%b` 	||余り||
||12 	||左 	||`a+b` 	||加算||
||12 	||左 	||`a-b` 	||減算||
||11 	||左 	||`a<<b` 	||左シフト||
||11 	||左 	||`a>>b` 	||符号付右シフト||
||11 	||左 	||`a>>>b` 	||符号無右シフト||
||10 	||左 	||`a==b` 	||等しい||
||10 	||左 	||`a!=b` 	||等しくない||
||10 	||左 	||`a===b` 	||同一||
||10 	||左 	||`a!==b` 	||同一ではない||
||10 	||左 	||`a is b` 	||aはbクラスのインスタンスか||
||10 	||左 	||`a !is b` 	||aはbクラスのインスタンスではないか||
||10 	||左 	||`a<b` 	||より小さい||
||10 	||左 	||`a>b` 	||より大きい||
||10 	||左 	||`a<=b` 	||より小さいか等しい||
||10 	||左 	||`a>=b` 	||より大きいか等しい||
||09 	||左 	||`a&b` 	||ビット単位の論理積||
||08 	||左 	||`a^b` 	||ビット単位の排他的論理和||
||07 	||左 	||`a|b` 	||ビット単位の論理和||
||06 	||左 	||`a&&b` 	||論理積||
||05 	||左 	||`a||b` 	||論理和||
||00 	||右 	||`once a` 	||最初の一度しか評価しない||
||00 	||右 	||`static a` 	||コンパイル時に評価する||

==空白による優先順位コントロール==
{{{
10 + 5 * 6
//=>40
}}}
この例では+より*の方が優先順位が高いため5 * 6が先に計算され、次に10と先ほどの5 * 6の結果が足されます。

Xtalは一般的な他の言語と違う優先順位のコントロールの方法を提供してます。
10 + 5の演算を先にしたい場合は、10と+と5の間の空白を無くし、くっつけて記述してください。
そうするとくっついた部分は、優先順位が一回り高くなるので先に計算されるようになります。

{{{
10+5 * 6
//=>90
}}}

次のように全てくっつけた場合、*の方が優先順位が高くなります。
{{{
10+5*6
//=>40
}}}

他のよくある言語のように、括弧で優先順位を制御することも出来ます。

{{{
(10 + 5) * 6
}}}


onceなどの優先順位0の演算子をくっつけて表記した場合、
優先順位が一番高くなる、というルールが適用されます。

例えば
{{{
once(10)+10
}}}
は
{{{
((once 10) + 10)
}}}
となります。