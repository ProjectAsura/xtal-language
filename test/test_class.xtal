inherit(lib::test);

Foo: class{
	+ _pub: 100;
	# _pro: 200;
	- _pri: 300;
		
	hoge: 555;
	
	foo: fun hoge;
}

Bar: class(Foo){

	bar: method{
		return this.pro;
	}
	
	- hoge: 1111;
}

Singleton: singleton{
	bar : fun(){
		return "aaa";
	}
	
	op_call: method{
		return 156;
	}
}

TestFoo: class{
	_obj;
	
	setup#Before: method{
		_obj = Foo();
	}
	
	eq#Test: method{
		assert _obj.pub==100;
		assert _obj.pub()==100;
	}
	
	add#Test: method{
		_obj.pub = 10;
		_obj.pub += 10;
		assert _obj.pub==20;
	}
	
	pro#Test: method{
		assert _obj.pro && false catch(e) true; 
		assert _obj.class::pro && false catch(e) true; 
	}
	
	pri#Test: method{
		assert _obj.pri && false catch(e) true; 
		assert _obj.class::pri && false catch(e) true; 
	}
}

TestBar: class{
	_obj;
	
	setup#Before: method{
		_obj = Bar();
	}
	
	def#Test: method{
		Bar::pub: method 200;
		assert _obj.pub==200;
	}

	bar#Test: method{
		assert _obj.bar==200;
	}
	
	def2#Test: method{
		Bar::pro: method 200;
		assert _obj.pro==200;
	}
	
	check#Test: method{
		assert Foo::hoge==555;
		assert Bar::foo()==555;
	}
	
	boo#Test{
		class Poo{
			test: 10;
			test2: 10 + 10;
		}
		
		assert Poo::test==10;
		assert Poo::test2==20;
	}
}

TestSingleton: class{
	tests#Test: method{
		assert Singleton.class===Singleton;
		assert Singleton::bar()=="aaa";
		assert Singleton.bar=="aaa";
	}
	
	call#Test: method{
		assert Singleton()==156;
	}
}

class TestEq{
	testeq#Test{
		class Foo {
				op_eq(a){
						return true;
				}
		};

		a: Foo();
		b: Foo();
		//assert (a == b);
		//assert !(a != b); 
	}
}


